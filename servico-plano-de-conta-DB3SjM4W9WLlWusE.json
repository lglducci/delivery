{"createdAt":"2025-08-27T23:53:02.787Z","updatedAt":"2025-08-30T10:45:52.269Z","id":"DB3SjM4W9WLlWusE","name":"servico plano de conta","active":false,"isArchived":false,"nodes":[{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.chatTrigger","typeVersion":1.3,"position":[-352,-96],"id":"062d2f6d-1f05-4d83-9739-7ca53f4a8d6b","name":"When chat message received","webhookId":"c217fc34-0e3e-4fa1-bd5d-29adfb962e7c"},{"parameters":{"options":{"systemMessage":"Você é um especialista em criar plano de conta completo para usuario..   Usuaario vai informar qual o setor que ele trabalha e vc vai sugerir um plano de conta em pdf. "}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[-144,-96],"id":"20be09ab-c178-4e89-9448-f1a98378053d","name":"AI Agent"},{"parameters":{"model":{"__rl":true,"mode":"list","value":"gpt-4.1-mini"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[-368,64],"id":"962de9a9-f31a-48b4-abee-3c32bcfd074b","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"2hW4LOItQwhgTw0Q","name":"OpenAi account"}}},{"parameters":{},"type":"@n8n/n8n-nodes-langchain.memoryBufferWindow","typeVersion":1.3,"position":[-144,112],"id":"32a7bd72-d1ef-482a-87a1-d3b9dedac6c1","name":"Simple Memory"},{"parameters":{"jsCode":" // Pega o texto do agente (ajuste o nome do campo se precisar)\nconst raw = ($json.output || $json.text || $json.message || '').toString();\n\n// ===== helpers =====\nconst esc = (s) => s\n  .replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');\n\nconst unbold = (s) => s.replace(/\\*\\*(.+?)\\*\\*/g, '$1');        // tira **...**\nconst strong = (s) => s.replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>');\n\n// Parser de linhas com níveis: \"- 1.1.2 Título\" → depth = número de pontos + 1\nfunction renderBody(text) {\n  const lines = text.replace(/\\r/g,'').split('\\n').map(l => l.trim()).filter(Boolean);\n\n  let html = '';\n  let depth = 0;\n\n  const closeTo = (d) => { while (depth > d) { html += '</ol>'; depth--; } };\n  const openTo  = (d) => { while (depth < d) { html += '<ol>'; depth++; } };\n\n  for (const line of lines) {\n    // Título principal (ex.: **Plano de Contas para Pizzaria**)\n    if (/^\\*{2}.+?\\*{2}$/.test(line)) {\n      closeTo(0);\n      html += `<h2>${strong(esc(unbold(line)))}</h2>`;\n      continue;\n    }\n\n    // Seções tipo \"1. **Receitas**\"\n    const mSection = line.match(/^(\\d+)\\.\\s+(.+)$/);\n    if (mSection && /\\*\\*/.test(mSection[2])) {\n      closeTo(0);\n      const title = strong(esc(unbold(mSection[2])));\n      html += `<h2>${mSection[1]}. ${title}</h2>`;\n      continue;\n    }\n\n    // Itens numerados: \"- 1.1.3 Alguma coisa\" (com possibilidade de subníveis)\n    const mItem = line.match(/^-+\\s*((\\d+)(\\.\\d+){0,6})\\s+(.+)$/);\n    if (mItem) {\n      const code = mItem[1];\n      const title = mItem[4];\n      const d = code.split('.').length; // nível pelo número de pontos\n      openTo(d);\n      html += `<li>${esc(code)} ${strong(esc(unbold(title)))}</li>`;\n      continue;\n    }\n\n    // Texto solto: ignora prefácio do agente (ex.: \"Claro! Vou preparar...\")\n    // Se quiser manter, descomente abaixo:\n    // if (line && !/^---$/.test(line)) {\n    //   closeTo(0);\n    //   html += `<p>${strong(esc(unbold(line)))}</p>`;\n    // }\n  }\n\n  closeTo(0);\n  return html || `<p class=\"muted\">Nenhum conteúdo estruturado encontrado.</p>`;\n}\n\nconst titleMatch = raw.match(/\\*\\*Plano de Contas.+?\\*\\*/i);\nconst titulo = titleMatch ? unbold(titleMatch[0]).replace(/^\\*\\*|\\*\\*$/g,'') : 'Plano de Contas';\n\nconst body = renderBody(raw);\n\n// ===== HTML completo A4 pronto pra PDF =====\nconst html = `<!doctype html>\n<html lang=\"pt-br\"><head>\n<meta charset=\"utf-8\">\n<title>${esc(titulo)}</title>\n<style>\n  @page { size: A4; margin: 20mm 16mm 20mm 16mm; }\n  html, body { font-family: -apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Inter,Arial,sans-serif; color:#111827; }\n  h1 { font-size:22pt; margin:0 0 6mm 0; }\n  h2 { font-size:14pt; margin:8mm 0 2mm; }\n  ol { margin:0; padding-left:5mm; }\n  ol > li { margin:1mm 0; }\n  .brand { display:flex; align-items:center; gap:10px; margin-bottom:4mm; }\n  .brand-badge { background:#0EA5E9; color:#fff; padding:6px 10px; border-radius:8px; font-weight:600; font-size:11pt; }\n  .meta { color:#6B7280; font-size:10pt; }\n  .header-line { height:4px; background: linear-gradient(90deg,#0EA5E9,#F59E0B); border-radius:2px; margin:4mm 0 6mm; }\n  footer { position: fixed; bottom: -5mm; left:0; right:0; height:12mm; color:#6B7280; font-size:10pt; }\n  footer .inner { display:flex; justify-content:space-between; padding: 0 16mm; }\n  .pagenum:before { content: counter(page); }\n  .totalpages:before { content: counter(pages); }\n  .muted { color:#6B7280; }\n</style>\n</head>\n<body>\n  <div class=\"brand\">\n    <div class=\"brand-badge\">SuaPlataforma</div>\n    <div>\n      <div style=\"font-weight:700;\">${esc(titulo)}</div>\n      <div class=\"meta\">Gerado via agente — ${new Date().toLocaleString('pt-BR')}</div>\n    </div>\n  </div>\n  <div class=\"header-line\"></div>\n  ${body}\n  <footer><div class=\"inner\"><div>${esc(titulo)}</div><div>Página <span class=\"pagenum\"></span> / <span class=\"totalpages\"></span></div></div></footer>\n</body></html>`;\n\n// === Saída: 1) json.html para debug  2) binary 'files' para Gotenberg ===\nconst binary = {\n  files: {\n    data: Buffer.from(html, 'utf8').toString('base64'),\n    mimeType: 'text/html',\n    fileName: 'index.html',\n  }\n};\n\nreturn [{ json: { html }, binary }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[224,-32],"id":"da3667c3-d886-4da6-9661-cfb8917b5746","name":"Code"},{"parameters":{"method":"POST","url":"https://gotenberggotenberg8-production-8d7d.up.railway.app/forms/chromium/convert/html","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"parameterType":"formBinaryData","name":"files","inputDataFieldName":"file"}]},"options":{"response":{"response":{"responseFormat":"file","outputPropertyName":"=balanconiveis.pdf"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[704,-80],"id":"07837d86-af19-4edb-8563-a139ea25d4fd","name":"HTTP Request16"},{"parameters":{"jsCode":" // garante que entrou um item com binário\nconst item = items[0];\nconst bins = item.binary || {};\nconst keys = Object.keys(bins);\nif (!keys.length) {\n  throw new Error('Nenhum binário no input. No HTTP Request (Gotenberg), ative Download=ON e Response=File.');\n}\n\n// escolhe o PDF: por mimeType, por extensão .pdf, ou o primeiro\nconst pdfKey =\n  keys.find(k => (bins[k].mimeType || '').includes('pdf')) ||\n  keys.find(k => k.toLowerCase().endsWith('.pdf')) ||\n  keys[0];\n\nconst pdf = bins[pdfKey];\nif (!pdf) {\n  throw new Error('PDF não encontrado. Binários disponíveis: ' + keys.join(', '));\n}\n\n// nome do arquivo\nconst fileName = item.json.fileName || pdf.fileName || 'relatorio.pdf';\n\n// sai com base64 + fileName para o próximo nó\nreturn [{\n  json: {\n    base64: pdf.data,                 // JÁ é base64\n    fileName: fileName                // ex.: relatorio-2025-08-20.pdf\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[960,-80],"id":"fc89a98b-276a-4a82-b7f7-d225723230b9","name":"Code20"},{"parameters":{"operation":"toText","sourceProperty":"html","binaryPropertyName":"=file","options":{"encoding":"utf8","fileName":"index.html"}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[464,-80],"id":"312b36a3-9ad4-48f3-aa9a-db49d1f41f2b","name":"Convert to File11"},{"parameters":{},"type":"n8n-nodes-base.noOp","typeVersion":1,"position":[1408,-80],"id":"6f710065-3bc4-486e-a57b-8e8ee89d0950","name":"No Operation, do nothing24","notes":"TEMPLATE DESENVOLVIDO POR NOCODE STARTUP\nhttps://nocodestartup.io/\n\nFORMAÇÃO GESTOR DE AGENTES DE IA:\nhttps://nocodestartup.io/formacao-gestor-agentes-ia/"},{"parameters":{"method":"POST","url":"=https://apinocode01.megaapi.com.br/rest/sendMessage/megacode-Mp5VTYM2qds/mediaBase64","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Client-Token","value":"application/json"},{"name":"Authorization","value":"Bearer Mp5VTYM2qds"}]},"sendBody":true,"specifyBody":"json","jsonBody":"= {\n  \"messageData\": {\n    \"to\": \"5516992975836\",\n    \"type\": \"document\",\n    \"caption\": \"Segue relatório de modelos\",\n    \"fileName\": \"{{ $node['gerahtml9'].json.fileName || 'balanconiveis.pdf' }}\",\n    \"mimeType\": \"application/pdf\",\n    \"base64\": \"data:application/pdf;base64, {{ $json.base64 }}\"\n  }\n}\n ","options":{}},"id":"82f03823-e55f-4a07-8884-4a7d6ca7f53c","name":"MegaApi12","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1184,-80]},{"parameters":{"jsCode":" // Texto do agente (ajuste o campo se necessário)\nconst raw = ($json.output || $json.text || $json.message || '').toString();\n\n// Helpers\nconst escBoldOut = (s) => s.replace(/\\*\\*(.+?)\\*\\*/g, '$1');\n\n// Filtra linhas úteis\nconst lines = raw\n  .replace(/\\r/g,'')\n  .split('\\n')\n  .map(l => l.trim())\n  .filter(l =>\n    l &&\n    l !== '---' &&\n    !/^\\[Gerando PDF/i.test(l) &&\n    !/^Claro!/i.test(l) &&\n    !/^Depois de criar/i.test(l) &&\n    !/^Por favor/i.test(l) &&\n    !/^Eu vou gerar/i.test(l)\n  );\n\nlet grupoAtual = '';           // Ex.: \"Receitas\", \"Custos\"...\nlet raizGrupoAtual = '';       // Ex.: \"1\", \"2\", ...\nconst rows = [];\n\n// Mapeia natureza por grupo (ajuste se quiser)\nfunction naturezaDoGrupo(grupo) {\n  const g = (grupo || '').toLowerCase();\n  if (g.includes('receita') || g.includes('passivo')) return 'C';\n  if (g.includes('custo') || g.includes('despesa') || g.includes('ativo')) return 'D';\n  return '';\n}\n\nfor (const line of lines) {\n  // Seção tipo: \"1. **Receitas**\"\n  const sec = line.match(/^(\\d+)\\.\\s+\\*\\*(.+?)\\*\\*/);\n  if (sec) {\n    raizGrupoAtual = sec[1];\n    grupoAtual = escBoldOut(sec[2]);\n    continue;\n  }\n\n  // Item tipo: \"- 1.1.3 Nome da Conta\"\n  const it = line.match(/^-+\\s*((\\d+)(?:\\.\\d+)*)\\s+(.+)$/);\n  if (it) {\n    const codigo = it[1];\n    const nome = escBoldOut(it[3]);\n    const nivel = codigo.split('.').length;\n    const codigo_pai = nivel > 1 ? codigo.slice(0, codigo.lastIndexOf('.')) : (raizGrupoAtual || '');\n    const grupo = grupoAtual;\n    const natureza = naturezaDoGrupo(grupo);\n\n    rows.push({ codigo, nome, grupo, natureza, nivel, codigo_pai });\n  }\n}\n\n// CSV\nfunction csvEscape(v) {\n  if (v === null || v === undefined) return '';\n  const s = String(v);\n  return /[\",\\n]/.test(s) ? `\"${s.replace(/\"/g,'\"\"')}\"` : s;\n}\nconst headers = ['codigo','nome','grupo','natureza','nivel','codigo_pai'];\nconst csv = [\n  headers.join(','),\n  ...rows.map(r => headers.map(h => csvEscape(r[h])).join(','))\n].join('\\n');\n\n// Saída: binário para próximo nó (HTTP Response, Drive, e-mail etc.)\nreturn [{\n  json: { linhas: rows.length },\n  binary: {\n    file: {\n      data: Buffer.from(csv, 'utf8').toString('base64'),\n      mimeType: 'text/csv',\n      fileName: 'plano-contas-pizzaria.csv'\n    }\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[464,-320],"id":"aa6e5685-dea8-4630-8a2a-952a52c446a8","name":"Code1"},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[-256,128],"id":"08a03a82-7d55-43c4-8d03-1933c7093a08","name":"Google Gemini Chat Model","credentials":{"googlePalmApi":{"id":"1aJ0kD1U7XDbklOE","name":"Google Gemini(PaLM) Api account"}}}],"connections":{"When chat message received":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[]]},"Simple Memory":{"ai_memory":[[{"node":"AI Agent","type":"ai_memory","index":0}]]},"AI Agent":{"main":[[{"node":"Code1","type":"main","index":0},{"node":"Code","type":"main","index":0}]]},"HTTP Request16":{"main":[[{"node":"Code20","type":"main","index":0}]]},"Code20":{"main":[[{"node":"MegaApi12","type":"main","index":0}]]},"Convert to File11":{"main":[[{"node":"HTTP Request16","type":"main","index":0}]]},"MegaApi12":{"main":[[{"node":"No Operation, do nothing24","type":"main","index":0}]]},"Code":{"main":[[{"node":"Convert to File11","type":"main","index":0}]]},"Google Gemini Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"dbbd74be-2d56-461c-99b2-aeef7a5ac589","triggerCount":0,"shared":[{"createdAt":"2025-08-27T23:53:02.787Z","updatedAt":"2025-08-27T23:53:02.787Z","role":"workflow:owner","workflowId":"DB3SjM4W9WLlWusE","projectId":"kDZetBR3Erj53CH1"}],"tags":[]}