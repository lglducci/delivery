{"createdAt":"2025-10-03T16:04:00.258Z","updatedAt":"2025-10-09T02:40:12.924Z","id":"p0pZuoGt8Vj7rxwI","name":"ResolveCardapio","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"empresa_id","type":"number"},{"name":"texto"},{"name":"categoria"},{"name":"topn","type":"number"},{"name":"min_score","type":"number"},{"name":"user_id","type":"number"},{"name":"pedido_id","type":"number"},{"name":"telefone"}]}},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-928,-96],"id":"e64f2dd2-317e-43de-9369-ab98bd991bc0","name":"When Executed by Another Workflow"},{"parameters":{"jsCode":" function norm(s){return (s||'').normalize('NFD').replace(/[\\u0300-\\u036f]/g,'').toLowerCase().trim();}\nconst texto = norm(  $input.first().json.comandos|| '');\nconst mNum = texto.match(/\\b\\d{1,3}\\b/);\nconst isNumero = !!mNum;\n\nreturn [{\n  json: {\n    empresa_id: $json.empresa_id,\n    texto: $input.first().json.nome,\n    isNumero,\n    numero: isNumero ? Number(mNum[0]) : null,\n    categoria: $json.categoria ?? null,\n    topn: $json.topn ?? 5,\n    min_score: $json.min_score ?? 0.35\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-400,-1328],"id":"d365a54c-1c04-4235-a652-bcfcb85ed237","name":"Code"},{"parameters":{"jsCode":" // Sai SEMPRE um único objeto com:\n// {\n//   normalizado, is_numero, total,\n//   itens: [{numero,nome,categoria,tipo,valor,score, quantidade, tamanho}],\n//   linhas: \"numero|nome|categoria|tipo|valor|score|quantidade|tamanho\\n...\"\n// }\n\nconst THRESH_UNICO = Number($json.THRESH_UNICO ?? 0.80); // se quiser filtrar depois\nconst topn = Number($json.topn ?? 5);\nconst quantidadePadrao = Number($json.quantidade ?? 1);\nconst tamanhoPadrao = ($json.tamanho ?? null) || null;\n\nconst out = {\n  normalizado: $json.texto ?? '',\n  is_numero: !!$json.isNumero\n};\n\n// 1) coleta linhas vindas do Postgres\nlet rows = (items || []).map(i => i?.json).filter(Boolean);\n\n// aceita payload em string JSON (eventual)\nrows = rows.map(r => {\n  if (typeof r === 'string') {\n    try { return JSON.parse(r); } catch { return null; }\n  }\n  return r;\n}).filter(Boolean);\n\n// normaliza tipos\nrows = rows.map(r => ({\n  ...r,\n  numero: (r.numero != null ? Number(r.numero) : null),\n  score: Number(r.score ?? 0),\n  valor: (r.valor !== undefined && r.valor !== null) ? Number(r.valor) : null,\n  tipo: r.tipo ?? null,\n  categoria: r.categoria ?? null,\n  nome: r.nome ?? null,\n  tamanho_aplicado: r.tamanho_aplicado ?? null\n}));\n\n// 2) de-dup por numero (mantém melhor score)\nconst byNum = new Map();\nfor (const r of rows) {\n  if (r.numero == null) continue;\n  const k = String(r.numero);\n  const prev = byNum.get(k);\n  if (!prev || r.score > prev.score) byNum.set(k, r);\n}\nrows = Array.from(byNum.values());\n\n// 3) ordena e limita\nrows.sort((a, b) => (b.score - a.score) || (a.numero - b.numero));\nrows = rows.slice(0, topn);\n\n// 4) mapeia para estrutura FINAL uniforme\nconst itens = rows.map(r => ({\n  numero: r.numero,\n  nome: r.nome,\n  categoria: r.categoria,\n  tipo: r.tipo,\n  valor: r.valor,                             // já considerado pelo tamanho no SQL\n  score: r.score,\n  quantidade: Number($json.quantidade ?? quantidadePadrao),\n  tamanho: (tamanhoPadrao || r.tamanho_aplicado || null) // prioridade: input > aplicado\n}));\n\n// 5) string pronta pra split('\\n') ou salvar como texto\nconst linhas = itens.map(i =>\n  [\n    i.numero,\n    i.nome?.replace(/\\|/g, '/'), // protege o separador\n    i.categoria,\n    i.tipo,\n    (i.valor ?? '').toString().replace(/\\|/g, '/'),\n    i.score.toFixed(3),\n    i.quantidade,\n    i.tamanho ?? ''\n  ].join('|')\n).join('\\n');\n\n// 6) caso não haja nenhum item, retorna lista vazia e linhas=\"\"\nreturn [{\n  json: {\n    ...out,\n    total: itens.length,\n    itens,\n    linhas,\n    user_id:$('Edit Fields').first().json.user_id,\n    id_empresa:$('Edit Fields').first().json.empresa_id,\n    pedido_id:$('Edit Fields').first().json.pedido_id \n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1408,-912],"id":"0959f234-4989-4bd8-a6b9-3adc7d675c5f","name":"Code1"},{"parameters":{"operation":"executeQuery","query":" SELECT \n  c.numero, c.nome, \n  c.tipo,\n  CASE \n    WHEN LOWER('{{ $json.tamanho }}') = 'grande'  THEN c.preco_grande\n    WHEN LOWER('{{ $json.tamanho }}') = 'media'   THEN c.preco_medio\n    WHEN LOWER('{{ $json.tamanho }}') = 'média'   THEN c.preco_medio\n    WHEN LOWER('{{ $json.tamanho }}') = 'pequena' THEN c.preco_pequena\n    ELSE COALESCE(c.preco_medio, c.preco_grande, c.preco_pequena)\n  END AS valor\nFROM cardapio AS c\nWHERE c.id_empresa = {{ $json.id_empresa }}\n  AND c.numero = {{ $json.numero }}\n  AND c.categoria = '{{ $json.categoria }}'\nORDER BY c.numero;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[-160,-96],"id":"e3b7e0a3-1b39-4fd3-bfd4-d8d61d8858eb","name":"Execute a SQL query","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"fieldToSplitOut":"comandos","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[-1952,0],"id":"f7cb97ac-046f-4821-b893-1d3fe13961e9","name":"Split Out"},{"parameters":{"jsCode":" function norm(s){\n  return (s||'').normalize('NFD').replace(/[\\u0300-\\u036f]/g,'').toLowerCase().trim();\n}\n\nfunction mapTam(t){\n  const s = norm(t);\n  if (/gran/.test(s)) return 'grande';\n  if (/(m[eé]di|medi)/.test(s)) return 'media';\n  if (/(peq|broto)/.test(s)) return 'pequena';\n  return null;\n}\n\nconst raw = String( $('Edit Fields1').first().json.texto || $json.texto || '').trim();\nif (!raw) return [{ json: { comandos: [], pendentes: [], texto: '' } }];\n\nconst s = norm(raw)\n  // normaliza plurais para singular\n  .replace(/\\bpizzas\\b/g, 'pizza')\n  .replace(/\\besfirras\\b/g, 'esfirra')\n  .replace(/\\bbebidas\\b/g, 'bebida')\n  .replace(/\\bgrandes\\b/g, 'grande')\n  .replace(/\\bmedias\\b/g, 'media')\n  .replace(/\\bm[eé]dias\\b/g, 'media')\n  .replace(/\\bpequenas\\b/g, 'pequena');\n\nconst chunks = s.split(/(?=\\b\\d{1,3}\\b(?:\\s+(?:pizza|esfirra|borda|bebida)\\b)?)/g)\n  .map(t => t.trim())\n  .filter(Boolean);\n\nlet prevCategoria = null;\nlet prevTamanho   = null;\n\nconst comandos  = [];\nconst pendentes = [];\n\nfor (const ch of chunks) {\n  let categoria = null;\n  if (/\\bpizza\\b/.test(ch)) categoria = 'pizza';\n  else if (/\\besfirra\\b/.test(ch)) categoria = 'esfirra';\n  else if (/\\bborda\\b/.test(ch)) categoria = 'borda';\n  else if (/(refrigerante|refri|coca|guarana|antarctica|fanta|agua|água|cerveja|suco|vinho)\\b/.test(ch)) categoria = 'bebida';\n  if (!categoria) categoria = prevCategoria;\n\n  let quantidade = 1;\n  const mQ = ch.match(/^\\s*(\\d{1,3})\\b/);\n  if (mQ) quantidade = Math.max(1, parseInt(mQ[1],10));\n\n  const volRe = /\\b(\\d+(?:[.,]\\d+)?)\\s*(l|ml)\\b/;\n  let volume=null;\n  const mVol=ch.match(volRe);\n  if (mVol) {\n    const num=mVol[1].replace(',', '.');\n    volume = mVol[2]==='l'\n      ? `${num.replace(/\\.0$/,'')}l`\n      : `${parseInt(num,10)}ml`;\n  }\n\n  let tamanho=null;\n  const mT=ch.match(/\\b(grande|m[eé]dia|media|pequena|broto)\\b/);\n  if (mT) tamanho = mapTam(mT[0]);\n  else if (categoria==='pizza') tamanho = prevTamanho;\n\n  const chNoVol = ch.replace(volRe, ' VOL ');\n\n  let numero=null;\n  const nums=(chNoVol.match(/\\b\\d{1,3}\\b/g)||[]).map(n=>parseInt(n,10));\n  if (nums.length){\n    if (mQ && parseInt(mQ[1],10)===nums[0]) numero = nums[1] ?? null;\n    else numero = nums[0];\n  }\n\n  let nome = ch\n    .replace(/^\\s*\\d+\\s*/,'')\n    .replace(/\\b(pizza|esfirra|bebida|refrigerante|refri|borda)\\b/g,' ')\n    .replace(/\\b(grande|m[eé]dia|media|pequena|broto)\\b/g,' ')\n    .replace(/\\b(com|sem|de|da|do|e)\\b/g,' ')\n    .replace(volRe,' ')\n    .replace(/\\b\\d{1,3}\\b/g,' ')\n    .replace(/\\s+/g,' ')\n    .trim() || null;\n\n  // montagem final\n  if (categoria === 'pizza') {\n    if (!tamanho) { pendentes.push({ linha: ch, motivo:'pizza_sem_tamanho' }); prevCategoria=categoria; continue; }\n    if (numero != null) comandos.push(`${quantidade} pizza ${numero} ${tamanho}`);\n    else if (nome)      comandos.push(`${quantidade} pizza ${nome} ${tamanho}`);\n    else                pendentes.push({ linha: ch, motivo:'pizza_sem_nome_ou_numero' });\n    prevCategoria = 'pizza'; prevTamanho = tamanho;\n    continue;\n  }\n\n  if (categoria === 'esfirra') {\n    if (numero != null) comandos.push(`${quantidade} esfirra ${numero}`);\n    else if (nome)      comandos.push(`${quantidade} esfirra ${nome}`);\n    else                pendentes.push({ linha: ch, motivo:'esfirra_sem_nome_ou_numero' });\n    prevCategoria = 'esfirra'; continue;\n  }\n\n  if (categoria === 'bebida') {\n    if (numero != null) comandos.push(`${quantidade} ${numero}`);\n    else if (nome)      comandos.push(`${quantidade} ${nome}${volume ? ' ' + volume : ''}`);\n    else if (volume)    comandos.push(`${quantidade} ${volume}`);\n    else                pendentes.push({ linha: ch, motivo:'bebida_sem_nome_ou_numero' });\n    prevCategoria = 'bebida'; continue;\n  }\n\n  if (numero != null) comandos.push(`${quantidade} ${numero}`);\n  else pendentes.push({ linha: ch, motivo:'indefinido' });\n}\n\nreturn [{ json: { comandos, pendentes, texto: comandos.join('\\n') } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2224,0],"id":"ce85b0a8-3503-49e3-b1c8-e9bcde1753c2","name":"Code3"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[80,-912],"id":"3aa8c040-beec-456c-b8b0-69c1829646df","name":"Loop Over Items","alwaysOutputData":true},{"parameters":{},"type":"n8n-nodes-base.noOp","name":"Replace Me","typeVersion":1,"position":[-1920,-192],"id":"0e54bbaa-e4ff-49a7-b700-0c9ce0804ccc"},{"parameters":{"jsCode":" // INPUT: $json.message (ex.: \"1 pizza mussarela , grande\")\n// OUTPUT: { quantidade, nome, tamanho, categoria, numero }\n\nfunction norm(s){\n  return (s||'')\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g,'') // tira acentos\n    .toLowerCase().trim();\n}\nfunction mapTam(t){\n  const x = norm(t);\n  if (/gran/.test(x)) return 'grande';\n  if (/(m[eé]di|medi)/.test(x)) return 'media';\n  if (/(peq|broto)/.test(x)) return 'pequena';\n  return null;\n}\n\nconst raw = String(  $('Loop Over Items').first().json.comandos || $json.text || '').trim();\nlet s = norm(raw).replace(/[,]+/g, ' '); // vírgulas viram espaço\n\n// categoria\nlet categoria = null;\nif (/\\bpizza\\b/.test(s)) categoria = 'pizza';\nelse if (/\\besfirra\\b/.test(s)) categoria = 'esfirra';\nelse if (/\\bborda\\b/.test(s)) categoria = 'borda';\nelse if (/(refrigerante|refri|coca|guarana|antarctica|fanta|agua|água|cerveja|suco|vinho)\\b/.test(s)) categoria = 'bebida';\nelse if (/\\bitem\\b/.test(s)) categoria = 'item';\n\n// quantidade (primeiro número no começo)\nlet quantidade = 1;\nconst mQ = s.match(/^\\s*(\\d{1,3})\\b/);\nif (mQ) quantidade = Math.max(1, parseInt(mQ[1],10));\n\n// tamanho\nlet tamanho = null;\nconst mT = s.match(/\\b(grande|m[eé]dia|media|pequena|broto)\\b/i);\nif (mT) tamanho = mapTam(mT[0]);\n\n// proteger volume (2l, 350ml) para não confundir com número do cardápio\nconst volRe = /\\b(\\d+(?:[.,]\\d+)?)\\s*(l|ml)\\b/gi;\nconst sNoVol = s.replace(volRe, ' VOL ');\n\n// número do cardápio (ignora a quantidade do início e volumes)\nlet numero = null;\nconst nums = (sNoVol.match(/\\b\\d{1,3}\\b/g) || []).map(n => parseInt(n,10));\nif (nums.length){\n  if (mQ && parseInt(mQ[1],10) === nums[0]) numero = nums[1] ?? null;\n  else numero = nums[0];\n}\n\n// nome limpo\nlet nome = s\n  .replace(/^\\s*\\d+\\s*/,'')                                   // tira quantidade\n  .replace(/\\b(pizza|esfirra|bebida|refrigerante|refri|borda|item)\\b/g,' ')\n  .replace(/\\b(grande|m[eé]dia|media|pequena|broto)\\b/g,' ')\n  .replace(/\\b(com|sem|de|da|do|e)\\b/g,' ')\n  .replace(volRe,' ')                                          // remove volumes\n  .replace(/\\b\\d{1,3}\\b/g,' ')                                 // remove números restantes\n  .replace(/\\s+/g,' ')\n  .trim() || null;\n\n// fallback: quando não há categoria explícita e existe um número, trate como \"item\"\nif (!categoria && numero != null) categoria = 'item';\n\nreturn [{ json: { quantidade, nome, tamanho, categoria, numero } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[416,-896],"id":"18a77adc-b3fb-45cf-a2ab-1fb27e30205a","name":"Code4"},{"parameters":{"tableId":"intencao_opcao","fieldsUi":{"fieldValues":[{"fieldId":"user_id","fieldValue":"={{ $('Edit Fields1').item.json.user_id }}"},{"fieldId":"pedido_id","fieldValue":"= {{ $('Edit Fields1').item.json.pedido_id }}"},{"fieldId":"numero","fieldValue":"={{ $json.numero }}"},{"fieldId":"categoria","fieldValue":"={{ $json.tipo }}"},{"fieldId":"id_empresa","fieldValue":"= {{ $('Edit Fields1').item.json.empresa_id }}"},{"fieldId":"opcao","fieldValue":"={{$itemIndex + 1}}"},{"fieldId":"tipo","fieldValue":"={{ $json.tipo }}"},{"fieldId":"valor","fieldValue":"={{ $json.valor }}"},{"fieldId":"tamanho","fieldValue":"={{ $('Code5').item.json.tamanho }}"},{"fieldId":"referencia","fieldValue":"={{ $('Code8').item.json.referencia }}"},{"fieldId":"quantidade","fieldValue":"={{ $('Code5').item.json.quantidade }}"},{"fieldId":"fracionada","fieldValue":"={{ $('Code8').item.json.fracionada }}"},{"fieldId":"nome","fieldValue":"={{ $json.nome }}"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[432,-96],"id":"cdb5c7d8-de23-4c1b-aae7-4ea36f623746","name":"Create a row","credentials":{"supabaseApi":{"id":"CcvRddDPb5xelxfb","name":"Supabase account"}}},{"parameters":{"assignments":{"assignments":[{"id":"3f194e58-de3d-48a4-893b-7415b22775cb","name":"user_id","value":"={{ $('When Executed by Another Workflow').item.json.user_id }}","type":"number"},{"id":"e0b2e0f7-5fd3-4ae9-8796-691442492c8f","name":"pedido_id","value":"={{ $('When Executed by Another Workflow').item.json.pedido_id }}","type":"number"},{"id":"7f9663e8-9b8d-452e-921e-46ef77271479","name":"empresa_id","value":"={{ $('When Executed by Another Workflow').item.json.empresa_id }}","type":"number"},{"id":"3a450cba-f67d-46cf-b87a-3635a02671da","name":"fracionada","value":"={{ $('Edit Fields2').item.json.fracionada }}","type":"boolean"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[224,-896],"id":"bc40ae17-b2b9-41e2-84ab-7196974e0447","name":"Edit Fields","executeOnce":true},{"parameters":{"operation":"executeQuery","query":"delete from intencao_opcao where user_id = {{ $('When Executed by Another Workflow').item.json.user_id }} and pedido_id = {{ $('When Executed by Another Workflow').item.json.pedido_id }} and id_empresa = {{ $('When Executed by Another Workflow').item.json.empresa_id }};","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[-2576,-32],"id":"52213446-a580-4f81-a47d-5d8990ea5387","name":"Execute a SQL query2","alwaysOutputData":true,"credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"fieldToSplitOut":"itens","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[1648,-816],"id":"8ae4eb3f-0cd0-4e51-aa06-df2b4d892251","name":"Split variasopc"},{"parameters":{"assignments":{"assignments":[{"id":"3a376baf-b53d-4709-a2a6-2b5e16619bcb","name":"empresa_id","value":"={{ $json.empresa_id }}","type":"number"},{"id":"33a98f88-1cbc-481e-89f3-abed44aed9be","name":"texto","value":"={{ $json.texto }}","type":"string"},{"id":"495b2ad7-123a-408f-9b8f-66c5d03d62ce","name":"categoria","value":"={{ $json.categoria }}","type":"string"},{"id":"dff344ba-44e5-4b47-a40a-722b2363c2b0","name":"topn","value":"={{ $json.topn }}","type":"string"},{"id":"851748da-0e92-4e6d-84d6-f2b6abee0457","name":"user_id","value":"={{ $json.user_id }}","type":"number"},{"id":"b8c5a3c5-7b90-491a-ac4a-bf6968b4031f","name":"pedido_id","value":"={{ $json.pedido_id }}","type":"number"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-736,-96],"id":"e5ecd8ee-6fae-49d6-99f8-f18e89dee395","name":"Edit Fields1"},{"parameters":{"fieldToSplitOut":"comandos","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[-112,-912],"id":"66d58716-2204-45b2-b1a9-9fb3067ceddf","name":"Split Out1"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[-2208,-160],"id":"370f241e-5d26-4028-aaf3-cc3596910848","name":"Loop Over Items1"},{"parameters":{},"type":"n8n-nodes-base.noOp","name":"Replace Me1","typeVersion":1,"position":[1120,-208],"id":"323ca42f-3061-42a0-b2ff-ab58eff09adc"},{"parameters":{"assignments":{"assignments":[{"id":"239e89e4-75be-4e6a-8414-4b4f125ac779","name":"comandos","value":"={{ $json.comandos }}","type":"array"},{"id":"1e49dd15-a681-4a23-b83e-13754496fc93","name":"combinado","value":"={{ $json.combinado }}","type":"boolean"},{"id":"021e97c6-0680-4780-8b43-5f28550732c4","name":"fracionada","value":"={{ $json.fracionada }}","type":"boolean"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-256,-912],"id":"e452d752-570c-4174-a75b-208260711474","name":"Edit Fields2"},{"parameters":{"jsCode":" // n8n Code Node (JavaScript)\n// Entrada: $json.texto, $json.user_id, $json.pedido_id\n// Saída: { comandos: [...], texto, combinado, fracionada, referencia, categoria }\n\nconst raw = String($input.first().json.texto || \"\").trim();\nif (!raw)\n  return [\n    {\n      json: {\n        comandos: [],\n        texto: \"\",\n        combinado: false,\n        fracionada: false,\n        referencia: null,\n      },\n    },\n  ];\n\nfunction norm(s) {\n  return s.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\n}\nfunction mapTam(s) {\n  const t = norm(s);\n  if (/gran/.test(t)) return \"grande\";\n  if (/(m[eé]di|medi)/.test(t)) return \"media\";\n  if (/(peq|pequen)/.test(t)) return \"pequena\";\n  return null;\n}\n\n// Detecta categoria principal\nlet categoriaDetectada = null;\nif (/\\bborda\\b/i.test(raw)) categoriaDetectada = \"borda\";\nelse if (/\\bitem\\b/i.test(raw)) categoriaDetectada = \"item\";\nelse if (/\\b1\\/2\\b/i.test(raw) || /\\bfracionad[ao]\\b/i.test(raw))\n  categoriaDetectada = \"fracionada\";\nelse if (/\\bpizza\\b/i.test(raw)) categoriaDetectada = \"pizza\";\nelse categoriaDetectada = \"geral\"; // fallback\n\n// Define prefixo de referência conforme categoria\nconst prefixos = {\n  pizza: \"PizzMain\",\n  borda: \"PizzBord\",\n  item: \"PizzItem\",\n  fracionada: \"PizzFrac\",\n  geral: \"PizzGen\",\n};\nconst uid = $json.user_id || 0;\nconst pid = $json.pedido_id || 0;\nconst rand = Math.random().toString(36).substring(2, 8);\nconst ref = `${prefixos[categoriaDetectada]}_${uid}_${pid}_${rand}`;\n\nlet comandos = [];\nlet combinado = false;\nlet fracionada = false;\n\n// ---------- FRACIONADA ----------\nif (/\\b1\\/2\\b/.test(raw)) {\n  fracionada = true;\n  combinado = true;\n  categoriaDetectada = \"fracionada\";\n\n  // quantidade (se vier no início)\n  const mQtd = raw.match(/^\\s*(\\d{1,3})\\b/);\n  const quantidade = mQtd ? parseInt(mQtd[1]) : 1;\n\n  // remove \"N pizza(s)\" do começo\n  let corpo = raw.replace(/^\\s*\\d+\\s*pizzas?\\s*/i, \"\").trim();\n\n  // divide as metades\n  const halves = corpo.split(/\\b1\\/2\\b/i).map((t) => t.trim()).filter(Boolean);\n\n  const parseHalf = (txt) => {\n    const mT = txt.match(/\\b(grande|m[eé]dia|media|pequena)\\b/i);\n    const tam = mT ? mapTam(mT[0]) : null;\n    const numMatch = txt.match(/\\b\\d{1,3}\\b/);\n    const numero = numMatch ? parseInt(numMatch[0], 10) : null;\n    const nome = txt\n      .replace(/\\b(grande|m[eé]dia|media|pequena)\\b/gi, \" \")\n      .replace(/\\b\\d{1,3}\\b/g, \" \")\n      .replace(/\\s+/g, \" \")\n      .trim();\n    return { nome: nome || null, numero, tam };\n  };\n\n  let h1 = halves[0]\n    ? parseHalf(halves[0])\n    : { nome: null, numero: null, tam: null };\n  let h2 = halves[1]\n    ? parseHalf(halves[1])\n    : { nome: null, numero: null, tam: null };\n\n  const tamFinal = h1.tam || h2.tam || null;\n\n  const linha1 = `${quantidade} pizza ${h1.numero || h1.nome || \"\"}${\n    tamFinal ? \" \" + tamFinal : \"\"\n  }`.trim();\n  const linha2 = `${quantidade} pizza ${h2.numero || h2.nome || \"\"}${\n    tamFinal ? \" \" + tamFinal : \"\"\n  }`.trim();\n\n  comandos = [linha1, linha2];\n\n  // 🔸 Detecta borda ou item após a pizza fracionada\n  const resto = corpo.split(/\\b1\\/2\\b/i).pop(); // pega o final\n  const extraMatch = raw.match(/\\b(borda|item)\\b\\s+\\d{1,3}/i);\n  if (extraMatch) {\n    const extraCategoria = /borda/i.test(extraMatch[0]) ? \"borda\" : \"item\";\n    const numExtra = raw.match(/\\b\\d{1,3}\\b(?!.*\\b\\d{1,3}\\b)/); // último número (ex: 300)\n    const tamanhoMatch = raw.match(/\\b(grande|m[eé]dia|media|pequena)\\b/i);\n    const tamExtra = tamanhoMatch ? mapTam(tamanhoMatch[0]) : null;\n\n    const linhaExtra = `1 ${extraCategoria} ${\n      numExtra ? numExtra[0] : \"\"\n    }${tamExtra ? \" \" + tamExtra : \"\"}`.trim();\n    comandos.push(linhaExtra);\n  }\n}\n\n// ✅ Saída final\nreturn [\n  {\n    json: {\n      comandos,\n      texto: comandos.join(\"\\n\"),\n      combinado,\n      fracionada,\n      referencia: ref,\n      categoria: categoriaDetectada,\n    },\n  },\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-544,-96],"id":"d60c373f-b42b-41eb-8c23-1ecbcbbb14b4","name":"Code8"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"ea38d4d0-82a4-4b43-8857-3bd28e4b5634","leftValue":"={{ $('Code8').item.json.combinado }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}},{"id":"83625a9d-0782-4729-8835-288fa020c98b","leftValue":"={{ $('Code').item.json.categoria }}","rightValue":"pizza","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}},{"id":"41c09da6-7232-4e16-825e-29dd528905b3","leftValue":"={{ $('Code8').item.json.fracionada }}","rightValue":"","operator":{"type":"boolean","operation":"false","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1536,656],"id":"7cfaa843-e840-4ef8-9506-e0de30a018f9","name":"If"},{"parameters":{"operation":"executeQuery","query":"update intencao_opcao  set referencia = '{{ $('Code8').item.json.referencia }}' where user_id = {{ $('Edit Fields1').item.json.user_id }} and pedido_id = {{ $('Edit Fields1').item.json.pedido_id }}   and id_empresa =  {{ $('Edit Fields1').item.json.empresa_id }}  and categoria = 'pizza' and numero = {{ $('Split variasopc').item.json.numero }}","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1744,560],"id":"5b42f79c-ea5a-4926-8487-651b8e2f4298","name":"Execute a SQL query1","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"jsCode":" // n8n Code Node (JavaScript)\n// Entrada: $json.texto, $json.user_id, $json.pedido_id\n// Saída: { comandos: [...], texto, combinado, referencia }\n\nconst raw = String($json.texto || \"\").trim();\nif (!raw) return [{ json: { comandos: [], texto: \"\", combinado: false, referencia: null } }];\n\nfunction norm(s){ return s.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g,'').toLowerCase(); }\nfunction mapTam(s){\n  const t = norm(s);\n  if (/gran/.test(t)) return \"grande\";\n  if (/(m[eé]di|medi)/.test(t)) return \"media\";\n  if (/(peq|pequen)/.test(t)) return \"pequena\";\n  return null;\n}\n\n// Detecta categoria principal\nlet categoriaDetectada = null;\nif (/\\bborda\\b/i.test(raw)) categoriaDetectada = \"borda\";\nelse if (/\\bitem\\b/i.test(raw)) categoriaDetectada = \"item\";\nelse if (/\\bfracionad[ao]\\b/i.test(raw)) categoriaDetectada = \"fracionada\";\nelse if (/\\bpizza\\b/i.test(raw)) categoriaDetectada = \"pizza\";\nelse categoriaDetectada = \"geral\"; // fallback\n\n// Define prefixo de referência conforme categoria\nconst prefixos = {\n  pizza: \"PizzMain\",\n  borda: \"PizzBord\",\n  item: \"PizzItem\",\n  fracionada: \"PizzFrac\",\n  geral: \"PizzGen\"\n};\n\nconst uid = $json.user_id || 0;\nconst pid = $json.pedido_id || 0;\nconst rand = Math.random().toString(36).substring(2, 8);\nconst ref = `${prefixos[categoriaDetectada]}_${uid}_${pid}_${rand}`;\n\n// Detecta \"para pizza\"\nconst low = norm(raw);\nconst sep = \" para pizza \";\nconst idx = low.indexOf(sep);\n\nlet comandos = [];\nlet combinado = false;\n\nif (idx === -1) {\n  // 🍕 Caso simples — apenas um item/pizza\n  const mQtd = raw.match(/^\\s*(\\d{1,3})\\b/);\n  const quantidade = mQtd ? parseInt(mQtd[1]) : 1;\n\n  const mTam = raw.match(/\\b(grande|m[eé]dia|media|pequena)\\b/i);\n  const tamanho = mTam ? mapTam(mTam[0]) : null;\n\n  let nome = raw\n    .replace(/\\b(pizza|borda|item|fracionada)\\b/ig,' ')\n    .replace(/\\b(grande|m[eé]dia|media|pequena)\\b/ig,' ')\n    .replace(/\\s+/g,' ')\n    .trim();\n\n  const linha = `${quantidade} ${categoriaDetectada} ${nome}${tamanho ? ' ' + tamanho : ''}`.trim();\n  comandos.push(linha);\n  combinado = false;\n} else {\n  // 🍕 Caso combinado — borda/item + pizza\n  combinado = true;\n  const left  = raw.slice(0, idx).trim();                 \n  const right = raw.slice(idx + sep.length).trim();       \n\n  const mQtd = left.match(/^\\s*(\\d{1,3})\\b/);\n  const quantidade = mQtd ? Math.max(1, parseInt(mQtd[1],10)) : 1;\n\n  let categoria = /\\bborda\\b/i.test(left) ? \"borda\" :\n                  /\\bitem\\b/i.test(left)  ? \"item\"  :\n                  /\\bfracionad[ao]\\b/i.test(left) ? \"fracionada\" : \"item\";\n\n  let nomeExtra = left\n    .replace(/^\\s*\\d+\\s*/,'')\n    .replace(/\\b(borda|item|fracionad[ao])\\b/ig,' ')\n    .replace(/\\s+/g,' ')\n    .trim();\n\n  const mTam = right.match(/\\b(grande|m[eé]dia|media|pequena)\\b/i);\n  const tamanho = mTam ? mapTam(mTam[0]) : null;\n\n  let nomePizza = right\n    .replace(/\\bpizza\\b/ig,' ')\n    .replace(/\\b(grande|m[eé]dia|media|pequena)\\b/ig,' ')\n    .replace(/\\s+/g,' ')\n    .trim();\n\n  // 🔹 sem referência nas strings de comando\n  const parteExtra = `${quantidade} ${categoria} ${nomeExtra}${tamanho ? ' ' + tamanho : ''}`.trim();\n  const partePizza = `${quantidade} pizza ${nomePizza}${tamanho ? ' ' + tamanho : ''}`.trim();\n\n  comandos = [parteExtra, partePizza];\n}\n\n// ✅ Saída final\nreturn [{\n  json: {\n    comandos,\n    texto: comandos.join('\\n'),\n    combinado,\n    referencia: ref,\n    categoria: categoriaDetectada\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2400,0],"id":"824dadcf-d0a8-4ad0-be44-78104eefc808","name":"Code9"},{"parameters":{"tableId":"anotapedido","fieldsUi":{"fieldValues":[{"fieldId":"user_id","fieldValue":"={{ $('When Executed by Another Workflow').item.json.user_id }}"},{"fieldId":"pedido_id","fieldValue":"={{ $('When Executed by Another Workflow').item.json.pedido_id }}"},{"fieldId":"id_empresa","fieldValue":"={{ $('When Executed by Another Workflow').item.json.empresa_id }}"},{"fieldId":"comando","fieldValue":"={{ $('When Executed by Another Workflow').item.json.texto }}"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[-2672,176],"id":"79637914-03f8-4bb7-8e62-a4efc3f046d9","name":"Create a row1","credentials":{"supabaseApi":{"id":"CcvRddDPb5xelxfb","name":"Supabase account"}}},{"parameters":{"content":"##  Criar um novo pedido \nCriar um novo pedido ou vários pedidos de um cliente","height":488,"width":1188,"color":4},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1056,-288],"id":"db492901-22ec-4a62-ac8b-31265cb40387","name":"Sticky Note21"},{"parameters":{"operation":"executeQuery","query":"delete  from item_pedido_temp  where user_id = {{ $('Edit Fields1').item.json.user_id }} and  pedido_id = {{ $('Edit Fields1').item.json.pedido_id }} and id_empresa = {{ $('Edit Fields1').item.json.empresa_id }} and status = 'rejeitado'  ;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[-2464,-192],"id":"d4738eba-812e-4650-ac8e-1221fbcfb5df","name":"ExcluiRejeitados","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"assignments":{"assignments":[{"id":"57ddce63-da48-426f-85ae-c63b16da57fa","name":"user_id","value":"={{ $('When Executed by Another Workflow').item.json.user_id }}","type":"number"},{"id":"01f0d23c-4a6a-4f2f-b986-7acfe7c4b65b","name":"pedido_id","value":"={{ $('When Executed by Another Workflow').item.json.pedido_id }}","type":"number"},{"id":"0718edfa-d295-496a-bfa1-f8e591daf83b","name":"telefone","value":"={{ $('When Executed by Another Workflow').item.json.telefone }}","type":"string"},{"id":"11755700-60e0-4981-8b4e-9daf2fa78ca4","name":"texto","value":"={{ $('Edit Fields1').item.json.texto }}","type":"string"},{"id":"d8b029ed-7560-4f80-a1d2-67587e8823f1","name":"empresa_id","value":"={{ $('Edit Fields1').item.json.empresa_id }}","type":"number"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-2448,176],"id":"fab37038-86b6-46f1-93ea-85a11c33e03b","name":"MontPedido"},{"parameters":{"jsCode":" // Code node (JavaScript) — Run Once for All Items\n// Captura fracionadas e remove do texto para a LLM\n\nconst inputItems = $input.all();   // <- aqui está a correção\nconst out = [];\n\nfor (const { json } of inputItems) {\n  const raw = String(json.chatInput ?? '');\n\n  // normalização leve\n  let norm = raw\n    .toLowerCase()\n    .replace(/[–—−]/g, '-')               // hífens\n    .replace(/\\b(meia|metade)\\b/g, '1/2') // \"meia/metade\" -> 1/2\n    .replace(/\\s+/g, ' ')\n    .trim();\n\n  const fracionadas = [];\n\n  // [qtd?][x?] 1/2 A (e|,|+|/) 1/2 B  (evita confundir 2L, etc.)\n  const re = /\\b(?:(\\d+)\\s*x?\\s*)?1\\/2\\s*(\\d{1,3})(?!\\s*[a-z])\\s*(?:e|,|\\+|\\/)\\s*1\\/2\\s*(\\d{1,3})(?!\\s*[a-z])\\b/gi;\n\n  // uma passada: coleta e remove\n  let rest = norm.replace(re, (_full, q, a, b) => {\n    fracionadas.push({\n      quantidade: q ? parseInt(q, 10) : 1,\n      metade1: parseInt(a, 10),\n      metade2: parseInt(b, 10),\n    });\n    return ' ';\n  });\n\n  rest = rest.replace(/\\s+/g, ' ').trim();\n\n  out.push({\n    json: {\n      ...json,                 // preserva campos existentes (user_id, pedido_id, etc.)\n      texto_original: raw,\n      texto_limpo: rest,       // passe ESTE texto para a LLM\n      fracionadas, \n    telefone:  $input.first().json.telefone\n      //depois some com pizzastelefone_fracionadas da LLM\n    },\n  });\n}\n\nreturn out;\n\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2208,176],"id":"27177adb-a02e-4aca-a023-f8f9cb58cdf6","name":"Code2"},{"parameters":{"resource":"messages-api","instanceName":"delivery","remoteJid":"={{ $('Dados Lead').item.json.IdConversa }}","messageText":"=``` ⏳ Processando...  ```","options_message":{}},"type":"n8n-nodes-evolution-api.evolutionApi","typeVersion":1,"position":[-2240,-320],"id":"e11869eb-50ee-4720-ba1a-a5a058c30ee7","name":"MenuCardapio15","credentials":{"evolutionApi":{"id":"ApqS5DPziUrzonYT","name":"Evolution account"}}},{"parameters":{"workflowId":{"__rl":true,"value":"gL1FbKkYm9zGfCAA","mode":"list","cachedResultName":"Kernel Pizza"},"workflowInputs":{"mappingMode":"defineBelow","value":{"mensagem":"= {{ $json.texto }}","user_id":"={{ $('MontPedido').item.json.user_id }}","pedido_id":"={{ $('MontPedido').item.json.pedido_id }}","rotina":1,"telefone":"={{ $('MontPedido').item.json.telefone }}","id_empresa":"={{ $('Edit Fields1').item.json.empresa_id }}"},"matchingColumns":[],"schema":[{"id":"mensagem","displayName":"mensagem","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"user_id","displayName":"user_id","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"number"},{"id":"pedido_id","displayName":"pedido_id","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"number"},{"id":"telefone","displayName":"telefone","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"rotina","displayName":"rotina","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"number"},{"id":"id_empresa","displayName":"id_empresa","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"number","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.2,"position":[-1840,416],"id":"8437960d-007b-4c46-b426-075e4f2b9750","name":"Call n8n Workflow Tool"},{"parameters":{},"type":"n8n-nodes-base.noOp","typeVersion":1,"position":[-1632,208],"id":"bbd2aac3-277c-409b-ba6a-5a02a1facbae","name":"No Operation, do nothing22","notes":"TEMPLATE DESENVOLVIDO POR NOCODE STARTUP\nhttps://nocodestartup.io/\n\nFORMAÇÃO GESTOR DE AGENTES DE IA:\nhttps://nocodestartup.io/formacao-gestor-agentes-ia/"},{"parameters":{"modelId":{"__rl":true,"value":"gpt-4o-mini","mode":"list","cachedResultName":"GPT-4O-MINI"},"messages":{"values":[{"content":"=O seu objetivo é chamar o fluxo gerador de itens do carrinho. \n\nUse no telefone   "}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-1968,176],"id":"b53e94bc-8b74-4a3a-96af-6a8d1546a44a","name":"Criar Pedido","credentials":{"openAiApi":{"id":"YvUoOPijIpNeTjed","name":"OpenAi account"}}},{"parameters":{"operation":"executeQuery","query":"select * from   PizzaFracionada( {{ $json.pedido_id }}  ,{{ $json.user_id }} ,{{ $json.id_empresa }}    )","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[896,-208],"id":"8af3e336-9325-4e9a-b0e9-b141fe0d23f0","name":"Execute a SQL query4","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"78b94382-a55b-4268-8f17-6afba3f6754a","leftValue":"={{ $('Code8').item.json.fracionada }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[624,-96],"id":"bd9f6b58-8d1a-4ba6-92f2-d55418cc7c05","name":"If1","executeOnce":true},{"parameters":{"assignments":{"assignments":[{"id":"38d2a6c3-e69b-4fb1-87d7-756f2a09d68f","name":"user_id","value":"={{ $('When Executed by Another Workflow').item.json.user_id }}","type":"number"},{"id":"bfe1354e-2845-4585-b5f8-a5024b859cf8","name":"pedido_id","value":"={{ $('When Executed by Another Workflow').item.json.pedido_id }}","type":"number"},{"id":"0b2c88a1-3a72-4ec0-b7fd-b05c9a1d35f3","name":"empresa_id","value":"={{ $('When Executed by Another Workflow').item.json.empresa_id }}","type":"number"},{"id":"4a3e4744-34e7-4dc5-a722-a699ec52f2d7","name":"fracionada","value":"={{ $('Edit Fields2').item.json.fracionada }}","type":"boolean"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[304,-1088],"id":"cc9b68df-3572-4edc-9718-45172bcbc2e3","name":"Edit Fields3","executeOnce":true},{"parameters":{"content":"##  Criar um novo pedido \nCriar um novo pedido ou vários pedidos de um cliente","height":840,"width":1412,"color":4},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[256,-448],"id":"8334c30b-420f-47fa-b188-c1c0cb23d777","name":"Sticky Note"},{"parameters":{"content":"##  Criar um novo pedido \nCriar um novo pedido ou vários pedidos de um cliente","height":648,"width":1252,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[320,-368],"id":"4bbe0592-c6e4-4afb-a10c-d0a9bda9128b","name":"Sticky Note1"},{"parameters":{"content":"##  Criar um novo pedido \nCriar um novo pedido ou vários pedidos de um cliente","height":360,"width":1092,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1008,-224],"id":"b0332d47-04ee-425f-8ba8-f79111a838d9","name":"Sticky Note2"},{"parameters":{"jsCode":" // n8n Code Node\nconst entradas = $json.comandos || [];\n\nfunction parseLinha(txt) {\n  const t = txt.toLowerCase().trim();\n\n  // 🔹 Quantidade = primeiro número do texto\n  const mQtd = t.match(/^\\s*(\\d+)/);\n  const quantidade = mQtd ? parseInt(mQtd[1], 10) : 1;\n\n  // 🔹 Número do item = último número do texto (depois da palavra pizza/borda)\n  const mNums = t.match(/\\d+/g);\n  let numero = null;\n  if (mNums && mNums.length > 1) {\n    numero = parseInt(mNums[mNums.length - 1], 10);\n  } else if (mNums) {\n    // se só tiver um número e ele não for a quantidade\n    numero = quantidade > 1 ? null : parseInt(mNums[0], 10);\n  }\n\n  // 🔹 Categoria\n  const categoria = /borda/.test(t)\n    ? \"borda\"\n    : /pizza/.test(t)\n    ? \"pizza\"\n    : \"item\";\n\n  // 🔹 Tamanho\n  const tamanho = /grande/.test(t)\n    ? \"grande\"\n    : /m[eé]dia/.test(t)\n    ? \"media\"\n    : /pequena|peq/.test(t)\n    ? \"pequena\"\n    : null;\n\n  return {\n    quantidade,\n    categoria,\n    numero,\n    tamanho,\n    texto_original: txt,\n    fracionada: $input.first().json.categoria,\n    referencia: $input.first().json.referencia,\n    id_empresa:$('When Executed by Another Workflow').first().json.empresa_id,\n    user_id: $('When Executed by Another Workflow').first().json.user_id,\n    pedido_id:$('When Executed by Another Workflow').first().json.pedido_id\n  };\n}\n\nreturn entradas.map(e => ({ json: parseLinha(e) }));\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-336,-96],"id":"f589dc2f-7e4a-422c-8976-6d13cfb5c581","name":"Code5"},{"parameters":{"operation":"executeQuery","query":" SELECT \n  c.numero,\n  c.nome,\n  c.categoria,\n  c.tipo,\n  c.preco_grande,\n  c.preco_medio,\n  c.preco_pequena,\n  c.descricao,\n  CASE \n    WHEN LOWER('{{ $json.tamanho }}') = 'grande'  THEN c.preco_grande\n    WHEN LOWER('{{ $json.tamanho }}') = 'media'   THEN c.preco_medio\n    WHEN LOWER('{{ $json.tamanho }}') = 'média'   THEN c.preco_medio\n    WHEN LOWER('{{ $json.tamanho }}') = 'pequena' THEN c.preco_pequena\n    ELSE COALESCE(c.preco_medio, c.preco_grande, c.preco_pequena)\n  END AS preco_escolhido\nFROM cardapio AS c\nWHERE c.id_empresa = {{ $('Edit Fields1').item.json.empresa_id }}\n  AND c.numero = {{ $('Code4').item.json.numero }}\n  AND c.categoria = '{{ $json.categoria }}'\nORDER BY c.numero;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[640,-880],"id":"8b6a2d51-296d-453c-81fa-63db1644cfab","name":"Execute a SQL query3","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{},"type":"n8n-nodes-base.noOp","name":"Replace Me2","typeVersion":1,"position":[928,16],"id":"62650e73-dae5-409e-86cc-7ad05137aa0c"}],"connections":{"When Executed by Another Workflow":{"main":[[{"node":"Edit Fields1","type":"main","index":0}]]},"Code":{"main":[[]]},"Execute a SQL query":{"main":[[{"node":"Create a row","type":"main","index":0}]]},"Code1":{"main":[[]]},"Code3":{"main":[[{"node":"Split Out","type":"main","index":0}]]},"Loop Over Items":{"main":[[{"node":"Edit Fields3","type":"main","index":0}],[{"node":"Edit Fields","type":"main","index":0}]]},"Replace Me":{"main":[[]]},"Split Out":{"main":[[]]},"Code4":{"main":[[]]},"Create a row":{"main":[[{"node":"If1","type":"main","index":0}]]},"Edit Fields":{"main":[[{"node":"Code4","type":"main","index":0}]]},"Execute a SQL query2":{"main":[[]]},"Split variasopc":{"main":[[]]},"Edit Fields1":{"main":[[{"node":"Code8","type":"main","index":0}]]},"Split Out1":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Loop Over Items1":{"main":[[],[]]},"Replace Me1":{"main":[[]]},"Edit Fields2":{"main":[[{"node":"Split Out1","type":"main","index":0}]]},"Code8":{"main":[[{"node":"Code5","type":"main","index":0}]]},"If":{"main":[[],[]]},"Execute a SQL query1":{"main":[[]]},"ExcluiRejeitados":{"main":[[]]},"MontPedido":{"main":[[{"node":"Code2","type":"main","index":0}]]},"Code2":{"main":[[{"node":"Criar Pedido","type":"main","index":0}]]},"MenuCardapio15":{"main":[[]]},"Call n8n Workflow Tool":{"ai_tool":[[{"node":"Criar Pedido","type":"ai_tool","index":0}]]},"Criar Pedido":{"main":[[{"node":"No Operation, do nothing22","type":"main","index":0}]]},"Create a row1":{"main":[[{"node":"MontPedido","type":"main","index":0}]]},"Execute a SQL query4":{"main":[[{"node":"Replace Me1","type":"main","index":0}]]},"If1":{"main":[[{"node":"Execute a SQL query4","type":"main","index":0}],[{"node":"Replace Me2","type":"main","index":0}]]},"Edit Fields3":{"main":[[]]},"Code5":{"main":[[{"node":"Execute a SQL query","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"When Executed by Another Workflow":[{"json":{"empresa_id":2,"texto":"1 pizza 39 média","categoria":"pizza","topn":null,"min_score":null,"user_id":78,"pedido_id":45,"telefone":"5516992975836"}}]},"versionId":"ff3a4562-e335-4570-8567-9545223c1add","triggerCount":0,"shared":[{"createdAt":"2025-10-03T16:04:00.258Z","updatedAt":"2025-10-03T16:04:00.258Z","role":"workflow:owner","workflowId":"p0pZuoGt8Vj7rxwI","projectId":"wFRMrac2003Pl1x6"}],"tags":[]}