{"createdAt":"2025-10-07T21:18:53.778Z","updatedAt":"2025-10-08T23:01:24.325Z","id":"gl0RYjlzfJknufRk","name":"consulta","active":false,"isArchived":false,"nodes":[{"parameters":{"jsCode":" const frase = $('MensagemTraduzida').first().json.message || \"\";\n\n// categorias aceitas\nconst categorias = [\"pizza\", \"esfirra\", \"refrigerante\", \"cerveja\"];\n\n// Regex: \"consultar ...\" seguido de tudo\nconst match = frase.match(/^consultar\\s+(.+)$/i);\n\nlet categoria = null;\nlet nome = null;\n\nif (match) {\n  const partes = match[1].trim().toLowerCase().split(/\\s+/);\n  const primeira = partes[0];\n\n  if (categorias.includes(primeira)) {\n    categoria = primeira;\n    nome = partes.slice(1).join(\" \") || null;\n  } else {\n    // se a primeira palavra nÃ£o Ã© categoria conhecida, trata tudo como nome\n    categoria = null;\n    nome = match[1].trim().toLowerCase();\n  }\n} else {\n  // nÃ£o comeÃ§ou com \"consultar\" â†’ trata tudo como nome\n  categoria = null;\n  nome = frase.trim().toLowerCase();\n}\n\nreturn { categoria, nome };\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-208,-304],"id":"2c4141af-deae-4f02-af00-5ccd987e775a","name":"ConsultarCardapio"},{"parameters":{"operation":"executeQuery","query":"select * from grava_intencao_opcao ( {{ $('MontPedido').item.json.user_id }} , {{ $('MontPedido').item.json.pedido_id }} , {{ $('Dados Lead').item.json.id_empresa }}   , '{{ $('MensagemTraduzida').item.json.message }}'    );\n   \n  ","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[-112,-192],"id":"8c28413e-d916-4ca3-bf90-f14f3aa43e18","name":"IntenÃ§Ãµes","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"assignments":{"assignments":[{"id":"a3c83333-8ce3-4995-8230-b361099aa1e4","name":"user_id","value":"={{ $('When Executed by Another Workflow').item.json.user_id }}","type":"number"},{"id":"d7c14753-505f-48ee-a344-fa565ace43df","name":"pedido_id","value":"={{ $('When Executed by Another Workflow').item.json.pedido_id }}","type":"number"},{"id":"fdf33d81-37b4-46c9-b56a-6787b3d92dac","name":"rotina","value":"={{ $('When Executed by Another Workflow').item.json.rotina }}","type":"number"},{"id":"511b111d-37a8-403e-9735-fdddd18ae248","name":"categoria","value":"={{ $('When Executed by Another Workflow').item.json.categoria }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1088,-64],"id":"8dd99415-9654-4a17-825f-ce01334ef1de","name":"MontPedido"},{"parameters":{"assignments":{"assignments":[{"id":"9f488c5c-0b3b-48e9-87b1-5a22d513d1ec","name":"IdConversa","value":"={{ $('When Executed by Another Workflow').item.json.telefone }}","type":"string"},{"id":"388e17d9-4d3a-40a6-9a45-52b166aa17b5","name":"telefone","value":"={{ $('When Executed by Another Workflow').item.json.telefone }}","type":"number"},{"id":"8b88d192-9c8b-4b70-be50-09eb1e7a9228","name":"id_empresa","value":"={{ $('When Executed by Another Workflow').item.json.id_empresa }}","type":"number"}]},"options":{}},"id":"48aa434b-58c7-4d11-b466-b23490996327","name":"Dados Lead","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1248,-64],"notes":"TEMPLATE DESENVOLVIDO POR NOCODE STARTUP\nhttps://nocodestartup.io/\n\nFORMAÃ‡ÃƒO GESTOR DE AGENTES DE IA:\nhttps://nocodestartup.io/formacao-gestor-agentes-ia/"},{"parameters":{"assignments":{"assignments":[{"id":"66a91f66-e755-4120-b22f-44c814f56162","name":"message","value":"={{ $json.mensagem }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1424,-64],"id":"79d09f9f-e326-4003-98e5-798058bd40b2","name":"MensagemTraduzida","notes":"TEMPLATE DESENVOLVIDO POR NOCODE STARTUP\nhttps://nocodestartup.io/\n\nFORMAÃ‡ÃƒO GESTOR DE AGENTES DE IA:\nhttps://nocodestartup.io/formacao-gestor-agentes-ia/"},{"parameters":{"workflowInputs":{"values":[{"name":"mensagem"},{"name":"user_id","type":"number"},{"name":"pedido_id","type":"number"},{"name":"telefone"},{"name":"rotina","type":"number"},{"name":"id_empresa","type":"number"}]}},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-1616,-64],"id":"dff60220-c174-4f75-a5c7-0f4a13f16a19","name":"When Executed by Another Workflow"},{"parameters":{},"type":"n8n-nodes-base.noOp","typeVersion":1,"position":[-544,-64],"id":"d17db0f0-7c56-4a92-a845-bd9cb26f3680","name":"No Operation, do nothing7","notes":"TEMPLATE DESENVOLVIDO POR NOCODE STARTUP\nhttps://nocodestartup.io/\n\nFORMAÃ‡ÃƒO GESTOR DE AGENTES DE IA:\nhttps://nocodestartup.io/formacao-gestor-agentes-ia/"},{"parameters":{"operation":"executeQuery","query":" SELECT \n  numero, \n  nome, \n  categoria, \n  tipo,\n  preco_grande, \n  preco_medio, \n  preco_pequena,\n  descricao \nFROM cardapio\nWHERE id_empresa =  {{ $('Dados Lead').item.json.id_empresa }}\n  AND unaccent(lower(categoria)) = unaccent(lower('{{ $json.categoria }}'))\n  AND unaccent(lower(nome)) ILIKE '%' || unaccent(lower(TRIM( '{{ $json.nome }}'))) || '%'\nORDER BY numero;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[-736,-64],"id":"de4fd113-7e81-46c0-9775-7d1e9234e94c","name":"Execute a SQL query","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"jsCode":" // n8n Code Node (JavaScript)\n// INPUT: $json.message (ex.: \"1 pizza mussarela , grande\")\n// OUTPUT: { quantidade, nome, tamanho, categoria, numero }\n\nfunction norm(s){\n  return (s||'')\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g,'') // tira acentos\n    .toLowerCase().trim();\n}\nfunction mapTam(t){\n  const x = norm(t);\n  if (/gran/.test(x)) return 'grande';\n  if (/(m[eÃ©]di|medi)/.test(x)) return 'media';\n  if (/(peq|broto)/.test(x)) return 'pequena';\n  return null;\n}\n\nconst raw = String($('When Executed by Another Workflow').first().json.mensagem || $json.text || '').trim();\nlet s = norm(raw).replace(/[,]+/g, ' '); // vÃ­rgulas viram espaÃ§o\n\n// categoria\nlet categoria = null;\nif (/\\bpizza\\b/.test(s)) categoria = 'pizza';\nelse if (/\\besfirra\\b/.test(s)) categoria = 'esfirra';\nelse if (/\\bborda\\b/.test(s)) categoria = 'borda';\nelse if (/(refrigerante|refri|coca|guarana|antarctica|fanta|agua|Ã¡gua|cerveja|suco|vinho)\\b/.test(s)) categoria = 'bebida';\nelse if (/\\bitem\\b/.test(s)) categoria = 'item';\n\n// quantidade (primeiro nÃºmero no comeÃ§o)\nlet quantidade = 1;\nconst mQ = s.match(/^\\s*(\\d{1,3})\\b/);\nif (mQ) quantidade = Math.max(1, parseInt(mQ[1],10));\n\n// tamanho\nlet tamanho = null;\nconst mT = s.match(/\\b(grande|m[eÃ©]dia|media|pequena|broto)\\b/i);\nif (mT) tamanho = mapTam(mT[0]);\n\n// proteger volume (2l, 350ml) para nÃ£o confundir com nÃºmero do cardÃ¡pio\nconst volRe = /\\b(\\d+(?:[.,]\\d+)?)\\s*(l|ml)\\b/gi;\nconst sNoVol = s.replace(volRe, ' VOL ');\n\n// nÃºmero do cardÃ¡pio (ignora a quantidade do inÃ­cio e volumes)\nlet numero = null;\nconst nums = (sNoVol.match(/\\b\\d{1,3}\\b/g) || []).map(n => parseInt(n,10));\nif (nums.length){\n  if (mQ && parseInt(mQ[1],10) === nums[0]) numero = nums[1] ?? null;\n  else numero = nums[0];\n}\n\n// nome limpo\nlet nome = s\n  .replace(/^\\s*\\d+\\s*/,'')                                   // tira quantidade\n  .replace(/\\b(pizza|esfirra|bebida|refrigerante|refri|borda|item)\\b/g,' ')\n  .replace(/\\b(grande|m[eÃ©]dia|media|pequena|broto)\\b/g,' ')\n  .replace(/\\b(com|sem|de|da|do|e)\\b/g,' ')\n  .replace(volRe,' ')                                          // remove volumes\n  .replace(/\\b\\d{1,3}\\b/g,' ')                                 // remove nÃºmeros restantes\n  .replace(/\\s+/g,' ')\n  .trim() || null;\n\n// Fallbacks inteligentes\nif (!categoria && numero != null) {\n  categoria = 'item'; // se for algo com nÃºmero, assume item\n} else if (!categoria && nome) {\n  categoria = 'pizza'; // se sÃ³ houver nome (ex: \"catupiry\"), assume pizza\n}\n\nreturn [{ json: { quantidade, nome, tamanho, categoria, numero } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-912,-64],"id":"a55e4ee5-fd43-490f-b2d4-4e4fd08cee93","name":"Code4"},{"parameters":{"operation":"executeQuery","query":" WITH params AS (\n  SELECT  \n    {{ $('Dados Lead').item.json.id_empresa }}::int AS empresa_id,\n    '{{ ($json.texto || \"\").replace(/'/g, \"''\") }}'::text AS texto,\n    {{ $json.topn   || 3 }}::int AS topn,\n    {{ $json.min_score || 0.35 }}::numeric AS min_score,\n    {{ $json.categoria ? `'${$json.categoria}'` : 'NULL' }}::text AS categoria,\n    {{ $json.nome ? `'${$json.nome}'` : 'NULL' }}::text AS nome_raw\n),\nq AS (\n  SELECT \n    unaccent(lower(coalesce(nome_raw, texto))) AS qtxt\n  FROM params\n),\n\n-- ðŸ”¹ Busca mais inteligente: similaridade + categoria\nhit_similar AS (\n  SELECT\n    c.numero, c.nome, c.categoria, c.tipo,\n    c.preco_grande, c.preco_medio, c.preco_pequena,\n    COALESCE(c.preco_medio, c.preco_grande, c.preco_pequena) AS valor,\n    similarity(unaccent(lower(c.nome)), (SELECT qtxt FROM q))::numeric AS score\n  FROM cardapio c, params p\n  WHERE c.id_empresa = p.empresa_id\n    AND (p.categoria IS NULL OR lower(c.categoria) = lower(p.categoria))\n    AND unaccent(lower(c.nome)) ILIKE '%' || (SELECT qtxt FROM q) || '%'\n  ORDER BY score DESC, c.numero\n  LIMIT (SELECT topn FROM params)\n),\n\n-- ðŸ”¹ fallback fuzzy via resolve_cardapio\nrec_fuzzy AS (\n  SELECT\n    c.numero, c.nome, c.categoria, c.tipo,\n    c.preco_grande, c.preco_medio, c.preco_pequena,\n    COALESCE(c.preco_medio, c.preco_grande, c.preco_pequena) AS valor,\n    r.score::numeric AS score\n  FROM params p\n  JOIN LATERAL resolve_cardapio(\n      p.empresa_id,\n      coalesce(p.nome_raw, p.texto),\n      p.topn,\n      p.min_score\n  ) r ON TRUE\n  JOIN cardapio c\n    ON c.id_empresa = p.empresa_id \n   AND c.numero = r.numero\n  WHERE NOT EXISTS (SELECT 1 FROM hit_similar)\n    AND (p.categoria IS NULL OR lower(c.categoria) = lower(p.categoria))\n)\n\n-- ðŸ”¹ Resultado final (melhor match absoluto)\nSELECT \n  numero, nome, categoria, tipo,\n  preco_grande, preco_medio, preco_pequena,\n  valor, score\nFROM (\n  SELECT * FROM hit_similar\n  UNION ALL\n  SELECT * FROM rec_fuzzy\n  ORDER BY score DESC, numero\n  LIMIT 1\n) AS final;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[-704,-416],"id":"523c0398-3408-41f4-ab5f-81bc6c02ee6a","name":"Execute a SQL query1","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"jsCode":" // INPUT: $json.message (ex.: \"1 pizza mussarela , grande\")\n// OUTPUT: { quantidade, nome, tamanho, categoria, numero }\n\nfunction norm(s){\n  return (s||'')\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g,'') // tira acentos\n    .toLowerCase().trim();\n}\nfunction mapTam(t){\n  const x = norm(t);\n  if (/gran/.test(x)) return 'grande';\n  if (/(m[eÃ©]di|medi)/.test(x)) return 'media';\n  if (/(peq|broto)/.test(x)) return 'pequena';\n  return null;\n}\n\nconst raw = String(  $('When Executed by Another Workflow').first().json.mensagem|| $json.text || '').trim();\nlet s = norm(raw).replace(/[,]+/g, ' '); // vÃ­rgulas viram espaÃ§o\n\n// categoria\nlet categoria = null;\nif (/\\bpizza\\b/.test(s)) categoria = 'pizza';\nelse if (/\\besfirra\\b/.test(s)) categoria = 'esfirra';\nelse if (/\\bborda\\b/.test(s)) categoria = 'borda';\nelse if (/(refrigerante|refri|coca|guarana|antarctica|fanta|agua|Ã¡gua|cerveja|suco|vinho)\\b/.test(s)) categoria = 'bebida';\nelse if (/\\bitem\\b/.test(s)) categoria = 'item';\n\n// quantidade (primeiro nÃºmero no comeÃ§o)\nlet quantidade = 1;\nconst mQ = s.match(/^\\s*(\\d{1,3})\\b/);\nif (mQ) quantidade = Math.max(1, parseInt(mQ[1],10));\n\n// tamanho\nlet tamanho = null;\nconst mT = s.match(/\\b(grande|m[eÃ©]dia|media|pequena|broto)\\b/i);\nif (mT) tamanho = mapTam(mT[0]);\n\n// proteger volume (2l, 350ml) para nÃ£o confundir com nÃºmero do cardÃ¡pio\nconst volRe = /\\b(\\d+(?:[.,]\\d+)?)\\s*(l|ml)\\b/gi;\nconst sNoVol = s.replace(volRe, ' VOL ');\n\n// nÃºmero do cardÃ¡pio (ignora a quantidade do inÃ­cio e volumes)\nlet numero = null;\nconst nums = (sNoVol.match(/\\b\\d{1,3}\\b/g) || []).map(n => parseInt(n,10));\nif (nums.length){\n  if (mQ && parseInt(mQ[1],10) === nums[0]) numero = nums[1] ?? null;\n  else numero = nums[0];\n}\n\n// nome limpo\nlet nome = s\n  .replace(/^\\s*\\d+\\s*/,'')                                   // tira quantidade\n  .replace(/\\b(pizza|esfirra|bebida|refrigerante|refri|borda|item)\\b/g,' ')\n  .replace(/\\b(grande|m[eÃ©]dia|media|pequena|broto)\\b/g,' ')\n  .replace(/\\b(com|sem|de|da|do|e)\\b/g,' ')\n  .replace(volRe,' ')                                          // remove volumes\n  .replace(/\\b\\d{1,3}\\b/g,' ')                                 // remove nÃºmeros restantes\n  .replace(/\\s+/g,' ')\n  .trim() || null;\n\n// fallback: quando nÃ£o hÃ¡ categoria explÃ­cita e existe um nÃºmero, trate como \"item\"\nif (!categoria && numero != null) categoria = 'item';\n\nreturn [{ json: { quantidade, nome, tamanho, categoria, numero } }];\n\n \n\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-928,-384],"id":"4400b8b3-91fe-4b28-8c17-94f518005b48","name":"Code"}],"connections":{"ConsultarCardapio":{"main":[[]]},"Dados Lead":{"main":[[{"node":"MontPedido","type":"main","index":0}]]},"MensagemTraduzida":{"main":[[{"node":"Dados Lead","type":"main","index":0}]]},"When Executed by Another Workflow":{"main":[[{"node":"MensagemTraduzida","type":"main","index":0}]]},"MontPedido":{"main":[[{"node":"Code4","type":"main","index":0}]]},"IntenÃ§Ãµes":{"main":[[]]},"Code4":{"main":[[{"node":"Execute a SQL query","type":"main","index":0}]]},"Execute a SQL query":{"main":[[{"node":"No Operation, do nothing7","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"When Executed by Another Workflow":[{"json":{"mensagem":"portinari","user_id":78,"pedido_id":44,"telefone":null,"rotina":null,"id_empresa":2}}]},"versionId":"08df6833-b8d7-4867-8449-fb9417230eed","triggerCount":0,"shared":[{"createdAt":"2025-10-07T21:18:53.778Z","updatedAt":"2025-10-07T21:18:53.778Z","role":"workflow:owner","workflowId":"gl0RYjlzfJknufRk","projectId":"wFRMrac2003Pl1x6"}],"tags":[]}