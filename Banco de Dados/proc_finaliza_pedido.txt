          CREATE OR REPLACE FUNCTION public.finalizar_pedido(
  p_user_id   integer,
  p_pedido_id integer
)
RETURNS text
LANGUAGE plpgsql
AS $$
 
DECLARE
  v_pedido_id bigint;  -- novo ID em 'pedidos'
  v_total     numeric;
  v_pagto     text;
  v_itens     text;
  v_resumo    text;
  v_comentario text;
BEGIN
  -- 1) PrÃ©-calcula total, forma de pagamento e linhas do resumo (a partir das tabelas _temp)
 

 UPDATE public.pedido_temp p
SET 
  valor  = COALESCE((
    SELECT SUM(i.valor)
    FROM public.item_pedido_temp i
    WHERE i.user_id = p_user_id   
      AND i.pedido_id = p_pedido_id 
  ), 0) + 3
WHERE p.user_id  = p_user_id
  AND p.pedido_id =  p_pedido_id ;

 
SELECT
    SUM(i.valor) + 3 AS total,
    MAX(p.tipo_cobranca) AS tipo_cobranca,
    STRING_AGG(
      E'\n       ' ||
      TRIM(BOTH ' ' FROM
        CASE WHEN i.quantidade > 1 THEN i.quantidade::text || 'x ' ELSE '' END ||
        i.nome ||
        CASE WHEN COALESCE(i.tamanho,'') <> '' THEN ' (' || i.tamanho || ')' ELSE '' END ||
        CASE WHEN COALESCE(i.categoria,'') <> '' THEN ' - ' || i.categoria ELSE '' END ||
        ' - R$ ' || TO_CHAR(i.valor, 'FM999G999G990D00') 
      ),
      '' ORDER BY i.categoria, i.nome
    ) AS itens,
    /* <<--- coluna extra pedida (somente da tabela comentario_pedido) */
      COALESCE(NULLIF(BTRIM(c.comentario), '') , 'â€”') AS comentario
INTO v_total, v_pagto, v_itens, v_comentario
FROM public.item_pedido_temp i
LEFT JOIN public.pedido_temp p
       ON p.user_id   = i.user_id
      AND p.pedido_id = i.pedido_id
LEFT JOIN public.comentario_pedido_temp c           -- <<--- join solicitado
       ON c.user_id   = i.user_id
      AND c.pedido_id = i.pedido_id
WHERE i.user_id   = p_user_id
  AND i.pedido_id = p_pedido_id
group by c.comentario;
 
 
  IF v_total IS NULL THEN
    RAISE EXCEPTION 'Pedido temporÃ¡rio % do usuÃ¡rio % nÃ£o encontrado ou sem itens.', p_pedido_id, p_user_id;
  END IF;

  -- 2) Insere na tabela final 'pedidos' e CAPTURA o novo pedido_id
  INSERT INTO public.pedidos (user_id, status, valor, resumo, tipo_cobranca)
  SELECT user_id, 'recebido', COALESCE(valor, v_total), NULL, tipo_cobranca
  FROM public.pedido_temp
  WHERE user_id   = p_user_id
    AND pedido_id = p_pedido_id
  RETURNING pedido_id INTO v_pedido_id;

  -- 3) Monta o resumo jÃ¡ com o NOVO nÃºmero do pedido
  v_resumo :=
      'ðŸ“¦ Pedido nÂº ' || v_pedido_id || E'\n' || 
      'ðŸ“‹ Resumo: ' || COALESCE(v_itens, '') || E'\n' ||
      'ðŸ’³ Forma de pagamento: ' || COALESCE(v_pagto, 'nÃ£o informado')|| E'\n' ||
      'ðŸ“¦ Entrega: R$3,00'|| E'\n' ||
      'ðŸ’° Total: R$ ' || TO_CHAR(v_total, 'FM999G999G990D00') || E'\n' ||
      'ðŸ’¬ ComentÃ¡rio: ' || v_comentario ;  

  -- 4) Insere os itens finais apontando para o NOVO pedido_id
  INSERT INTO public.item_pedido (
    numero, user_id, quantidade, tamanho, fracionada, tipo,
    categoria, numero_fracao, nome, volume, status, valor,
    valor_fracao, pedido_id, valor_unitario
  )
  SELECT
    numero, user_id, quantidade, tamanho, fracionada, tipo,
    categoria, numero_fracao, nome, volume, status, valor,
    valor_fracao, v_pedido_id AS pedido_id, valor_unitario
  FROM public.item_pedido_temp
  WHERE user_id   = p_user_id
    AND pedido_id = p_pedido_id;

  -- 5) ComentÃ¡rios: move para a tabela final
  INSERT INTO public.comentario_pedido (user_id, pedido_id, comentario)
  SELECT user_id, v_pedido_id AS pedido_id, comentario
  FROM public.comentario_pedido_temp
  WHERE user_id   = p_user_id
    AND pedido_id = p_pedido_id;

  -- 6) Atualiza o resumo no pedido FINAL
  UPDATE public.pedidos
     SET resumo = v_resumo
   WHERE pedido_id = v_pedido_id;

  -- 6) Limpa temporÃ¡rios (comentÃ¡rios)
  DELETE FROM public.comentario_pedido_temp
   WHERE user_id   = p_user_id
     AND pedido_id = p_pedido_id;

  -- 7) Limpa temporÃ¡rios (itens)
  DELETE FROM public.item_pedido_temp
   WHERE user_id   = p_user_id
     AND pedido_id = p_pedido_id;

  -- 8) Limpa temporÃ¡rios (pedido)
  DELETE FROM public.pedido_temp
   WHERE user_id   = p_user_id
     AND pedido_id = p_pedido_id;

  -- 9) Retorna a mensagem pronta
  RETURN v_resumo;
END;

$$;
 GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO authenticated;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO PUBLIC; 