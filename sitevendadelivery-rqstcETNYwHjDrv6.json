{"createdAt":"2025-09-07T01:20:05.633Z","updatedAt":"2025-09-14T23:45:08.050Z","id":"rqstcETNYwHjDrv6","name":"SiteVendaDelivery","active":false,"isArchived":false,"nodes":[{"parameters":{"path":"cardapio_publico","responseMode":"lastNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2.1,"position":[-96,368],"id":"43b2613f-cfac-4fa5-ade6-9d0e32a284d8","name":"Webhook","webhookId":"4bb058e1-a5fa-4abd-aa6c-4ab48b1afed1"},{"parameters":{"operation":"getAll","tableId":"cardapio","limit":150},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[0,0],"id":"b7ea44a1-88d8-4954-8759-e116337bc226","name":"Get many rows","disabled":true},{"parameters":{"options":{"responseCode":200,"responseHeaders":{"entries":[{"name":"JSON","value":"={{ $json.items }}"},{"name":"Content-Type","value":"application/json"}]}}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.4,"position":[656,352],"id":"6074ecd5-40b9-458a-945a-b1c76542799e","name":"Respond to Webhook","disabled":true},{"parameters":{"jsCode":" // Lê todas as linhas do node anterior (Get many rows)\nconst rows = $input.all().map(i => i.json);\n\n// helpers\nconst num = v => {\n  if (v === null || v === undefined) return 0;\n  if (typeof v === 'number') return v;\n  if (typeof v === 'string') return Number(v.replace(/\\./g,'').replace(',','.')) || 0;\n  return 0;\n};\nconst clean = s => (s ?? '').toString().replace(/\\s+/g,' ').trim();\n\nconst items = rows.map((v, i) => {\n  // normaliza categoria\n  const cat = String(v.categoria ?? v.tipo ?? 'OUTROS').toUpperCase();\n\n  // preços\n  let precoG = num(v.preco_grande ?? v.precoG ?? v.grande ?? v.preco ?? v.valor);\n  let precoM = num(v.preco_medio  ?? v.precoM ?? v.medio);\n\n  // se só tiver 1 preço, replica pros dois para não quebrar a UI\n  if (!precoG && precoM) precoG = precoM;\n  if (!precoM && precoG) precoM = precoG;\n\n  const permiteMeia = (cat === 'PIZZA') && !!precoG;\n  const precoMeia   = permiteMeia ? +(precoG / 2).toFixed(2) : null;\n\n  return {\n    id:        v.id ?? v.numero ?? v.item_id ?? (i + 1),\n    nome:      clean(v.nome ?? v.titulo ?? `Item ${i + 1}`),\n    descricao: clean(v.descricao),\n    categoria: cat,\n    imagem:    v.imagem ?? v.imagem_url ?? '',\n\n    // “principal” (usa grande se existir, senão médio)\n    preco: precoG || precoM || 0,\n\n    // tamanhos explícitos\n    preco_medio:  precoM || null,\n    preco_grande: precoG || null,\n    tamanhos: { M: precoM || null, G: precoG || null },\n\n    // meia pizza\n    permite_meia: permiteMeia,\n    preco_meia:   precoMeia,\n  };\n});\n\n// IMPORTANTE: o Respond node precisa receber UM OBJETO (não array)\nreturn [{ json: { items, count: items.length, ts: new Date().toISOString() } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[256,32],"id":"69a1cbe1-8de7-425d-ac87-14c5c4fad0f0","name":"cardapio2","disabled":true},{"parameters":{"jsCode":" // Lê todas as linhas do node anterior\nconst rows = $input.all().map(i => i.json);\n\n// helpers\nconst num = v => {\n  if (v === null || v === undefined) return 0;\n  if (typeof v === 'number') return v;\n  if (typeof v === 'string') return Number(v.replace(/\\./g,'').replace(',','.')) || 0;\n  return 0;\n};\nconst txt = v => (v ?? '').toString().replace(/\\s+/g,' ').trim();\n\nconst items = rows.map((v, i) => {\n  const categoria = String(v.categoria ?? v.tipo ?? 'OUTROS').toUpperCase();\n  const isPizza   = categoria === 'PIZZA';\n\n  // Leia todos os campos possíveis vindos do banco\n  const rawM = num(v.preco_medio  ?? v.pm ?? v.precoM);\n  const rawG = num(v.preco_grande ?? v.pg ?? v.precoG);\n  const rawU = num(v.preco ?? v.valor); // preço \"único\" genérico\n\n  let preco, preco_medio = null, preco_grande = null, tamanhos = [];\n  let permite_meia = false, preco_meia = null;\n\n  if (isPizza) {\n    // Pizza: usa G se existir, senão M, senão qualquer preço único\n    preco_grande = rawG || (rawU && !rawM ? rawU : 0) || null;\n    preco_medio  = rawM || null;\n    preco        = (preco_grande ?? 0) || (preco_medio ?? 0) || rawU || 0;\n\n    // Só pizza pode meia (metade do G)\n    if (preco_grande) {\n      permite_meia = true;\n      preco_meia   = +(preco_grande / 2).toFixed(2);\n    }\n\n    // Botões de tamanhos só para pizza\n    tamanhos = [\n      ...(preco_medio  ? [{ nome: 'M', preco: preco_medio  }] : []),\n      ...(preco_grande ? [{ nome: 'G', preco: preco_grande }] : []),\n    ];\n  } else {\n    // Não-pizza: um único preço (pega o que tiver)\n    preco = rawU || rawG || rawM || 0;\n    // garante que NÃO saiam campos de tamanho\n    preco_medio = null;\n    preco_grande = null;\n    tamanhos = [];\n    permite_meia = false;\n    preco_meia = null;\n  }\n\n  return {\n    id:        v.numero ?? v.id ?? v.item_id ?? (i + 1),\n    nome:      txt(v.nome ?? v.titulo ?? `Item ${i + 1}`),\n    categoria,\n    descricao: txt(v.descricao),\n    imagem:    v.imagem ?? v.imagem_url ?? '',\n    preco,\n    preco_medio,\n    preco_grande,\n    tamanhos,\n    permite_meia,\n    preco_meia,\n    disponivel: String(v.disponivel ?? '').toLowerCase() !== 'false',\n    volume: v.volume ?? null,\n    \n  };\n});\n\n// **Respond to Webhook** precisa de OBJETO (não array)\nreturn [{ json: { items, count: items.length } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[352,368],"id":"34b1c1b7-7b73-42e1-8b78-eacff0f4ec03","name":"cardapio3"},{"parameters":{"jsCode":" // pega todas as linhas vindas do \"Get many rows\"\nconst rows = $input.all().map(i => i.json);\n\n// helper: transforma \"64\", \"53,50\", \"1.234,56\" em número\nfunction num(v){\n  if (typeof v === 'number') return v;\n  if (typeof v === 'string') return Number(v.replace(/\\./g,'').replace(',','.')) || 0;\n  return 0;\n}\n\nconst items = rows.map((v, i) => {\n  const categoria = String(v.categoria ?? v.tipo ?? 'OUTROS').toUpperCase();\n  const isPizza = categoria === 'PIZZA';\n\n  const precoMedio   = num(v.preco_medio   ?? v.pm ?? v.precoM);\n  const precoGrande  = num(v.preco_grande  ?? v.pg ?? v.precoG);\n  const precoUnico   = num(v.preco ?? v.valor); // p/ não-pizza\n\n  // “preco” base que a UI pode usar como default:\n  const preco = isPizza ? (precoGrande || precoMedio) : (precoUnico || precoMedio || precoGrande);\n\n  // imagem fallback (se não tiver no banco)\n  const imagem = v.imagem ?? v.imagem_url ?? '';\n\n  return {\n    id: v.numero ?? v.id ?? v.item_id ?? (i + 1),\n    nome: v.nome ?? v.titulo ?? `Item ${i + 1}`,\n    categoria,\n    descricao: v.descricao ?? '',\n    imagem,                            // string (ou vazio)\n    preco,                             // número (default)\n    preco_medio:  isPizza ? precoMedio  : null,\n    preco_grande: isPizza ? precoGrande : null,\n    // tamanhos opcionais (se quiser usar na UI):\n    tamanhos: isPizza\n      ? [\n          ...(precoMedio  ? [{ nome: 'M', preco: precoMedio  }] : []),\n          ...(precoGrande ? [{ nome: 'G', preco: precoGrande }] : []),\n        ]\n      : [],\n    // flags úteis\n    disponivel: (String(v.disponivel ?? '').toLowerCase() !== 'false'),\n    volume: v.volume ?? null,\n  };\n});\n\n// IMPORTANTE: Respond to Webhook espera um OBJETO.\n// Envelopa o array em { items, count }.\nreturn [{ json: { items, count: items.length } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[544,48],"id":"7e7d958b-d6f0-44d0-9290-0029d0d7b942","name":"cardapio4","disabled":true},{"parameters":{"operation":"executeQuery","query":"   select * from cardapio order by numero , tipo desc ;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[112,368],"id":"fcca54b3-2aef-447e-8dff-446d4200a92e","name":"Execute a SQL query","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}}],"connections":{"Webhook":{"main":[[{"node":"Execute a SQL query","type":"main","index":0}]]},"Execute a SQL query":{"main":[[{"node":"cardapio3","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"66237c90-ed1f-4611-92eb-89fb2745cfcc","triggerCount":1,"shared":[{"createdAt":"2025-09-07T01:20:05.633Z","updatedAt":"2025-09-07T01:20:05.633Z","role":"workflow:owner","workflowId":"rqstcETNYwHjDrv6","projectId":"wFRMrac2003Pl1x6"}],"tags":[]}