 DROP FUNCTION additemborda(integer,integer,integer,integer,text,text)


 CREATE OR REPLACE FUNCTION addItemBorda(
    p_user_id     INT,
    p_pedido_id   INT,
    p_empresa_id  INT,
    p_ordem_item  INT,
    p_borda_nome  TEXT,   -- ex.: 'catupiry', 'cheddar', 'calabresa' (para categoria 'borda' ou outra)
    p_categoria   TEXT    -- ex.: 'borda'
) RETURNS INT AS $$
DECLARE
    v_item_id_pai INT;
    v_tamanho     TEXT;
    v_rows        INT := 0;
    v_numero  integer;
   v_nome     text; 
BEGIN
    -- 1) Captura a pizza pai (pela ordem_item)
    SELECT i.item_id, i.tamanho, i.numero, i.nome 
      INTO v_item_id_pai, v_tamanho, v_numero  , v_nome      
    FROM item_pedido_temp i
    WHERE i.user_id    = p_user_id
      AND i.pedido_id  = p_pedido_id
      AND i.id_empresa = p_empresa_id
      AND i.ordem_item = p_ordem_item
      AND i.categoria  = 'pizza'
    ORDER BY i.item_id DESC
    LIMIT 1;

    -- Se não achou pai, não interrompe: retorna 0
    IF v_item_id_pai IS NULL THEN
        RETURN 0;
    END IF;

    -- 2) Candidatas de borda (ou outra categoria), com preço por tamanho
    WITH cand AS (
        SELECT
            b.numero::INT AS numero,
            b.nome        AS nome,
            b.categoria   AS categoria,
            b.tipo        AS tipo,
            CASE
                WHEN v_tamanho ILIKE 'g%%' OR v_tamanho ILIKE 'gran%%' THEN b.preco_grande
                WHEN v_tamanho ILIKE 'm%%' OR v_tamanho ILIKE 'med%%'  THEN b.preco_media
                ELSE COALESCE(b.preco_media, b.preco_grande)
            END AS valor
        FROM busca_cardapio((
            SELECT string_agg(num, ', ' ORDER BY num::INT)
            FROM (
                SELECT DISTINCT c.numero::TEXT AS num
                FROM cardapio c
                WHERE LOWER(c.categoria) = LOWER(p_categoria)
                  AND c.nome ILIKE '%' || COALESCE(p_borda_nome,'') || '%'
                  AND c.id_empresa = p_empresa_id
            ) t
        )) b
    )
    -- 3) Insere todas as opções válidas, numerando ordem_item 1..N só para este bloco
    INSERT INTO item_pedido_temp
      (numero,  nome,  user_id,  pedido_id,  id_empresa,
       valor,   fracionada, categoria, tipo,  status,
       tamanho, id_pizza_pai, ordem_item)
    SELECT
      c.numero,  (      initcap(c.categoria) ||' ' || c.nome || ' da pizza ' || v_nome)  as nome , p_user_id, p_pedido_id, p_empresa_id,
      c.valor, FALSE,   c.categoria, c.tipo, 'additem',
      v_tamanho, v_item_id_pai,
      ROW_NUMBER() OVER (ORDER BY c.numero) AS ordem_item
    FROM cand c
    WHERE c.valor IS NOT NULL AND c.valor > 0
    ORDER BY c.numero;

    GET DIAGNOSTICS v_rows = ROW_COUNT;

    -- Se nada foi inserido (não encontrou/sem preço), retorna 0
    RETURN COALESCE(v_rows, 0);
END;
$$ LANGUAGE plpgsql;
