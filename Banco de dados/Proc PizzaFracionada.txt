 CREATE OR REPLACE FUNCTION PizzaFracionada(
  p_pedido_id  INT,
  p_user_id    INT,
  p_empresa_id INT
)
RETURNS BOOLEAN
LANGUAGE plpgsql
AS $$
DECLARE
  v_ref TEXT;
  v_metade1 RECORD;
  v_metade2 RECORD;
  v_borda RECORD;
  v_tem_fracionada BOOLEAN := FALSE;
  v_item_id INT;
BEGIN
  -- üîπ 1Ô∏è‚É£ Loop para cada refer√™ncia com 2 ou 3 linhas
  FOR v_ref IN
    SELECT referencia
    FROM intencao_opcao
    WHERE user_id = p_user_id
      AND id_empresa = p_empresa_id
      AND pedido_id = p_pedido_id
      AND fracionada = TRUE
    GROUP BY referencia
    HAVING COUNT(*) BETWEEN 2 AND 3
  LOOP
    v_tem_fracionada := TRUE;

    -- üîπ 2Ô∏è‚É£ Pega as duas metades
    SELECT * INTO v_metade1
    FROM intencao_opcao
    WHERE referencia = v_ref
      AND categoria = 'pizza'
      AND user_id = p_user_id
      AND id_empresa = p_empresa_id
    ORDER BY id
    LIMIT 1;

    SELECT * INTO v_metade2
    FROM intencao_opcao
    WHERE referencia = v_ref
      AND categoria = 'pizza'
      AND user_id = p_user_id
      AND id_empresa = p_empresa_id
    ORDER BY id DESC
    LIMIT 1;

    -- üîπ 3Ô∏è‚É£ Inserir primeira metade
    INSERT INTO item_pedido_temp (
      user_id,
      pedido_id,
      quantidade,
      tamanho,
      fracionada,
      tipo,
      categoria,
      nome,
      nome_fracao,
      numero,
      numero_fracao,
      valor,
      valor_fracao,
      pizza_referencia,
      id_empresa,
      status,
      created_at
    )
    VALUES (
      p_user_id,
      p_pedido_id,
      COALESCE(v_metade1.quantidade, 1),
      COALESCE(v_metade1.tamanho, v_metade2.tamanho, 'grande'),
      TRUE,
      COALESCE(v_metade1.tipo, 'salgado'),
      'pizza',
      v_metade1.nome,
      NULL,
      v_metade1.numero,
      0,
      COALESCE(v_metade1.valor, 0),
      0,
      v_ref,
      p_empresa_id,
      'inicio',
      NOW()
    )
    RETURNING item_id INTO v_item_id;

    -- üîπ 4Ô∏è‚É£ Atualizar com dados da segunda metade
    UPDATE item_pedido_temp
    SET
      numero_fracao = v_metade2.numero,
      nome_fracao   = v_metade2.nome,
      valor_fracao  = COALESCE(v_metade2.valor, 0),
      valor         = GREATEST(COALESCE(v_metade1.valor, 0), COALESCE(v_metade2.valor, 0))
    WHERE item_id = v_item_id;

    -- üîπ 4BÔ∏è‚É£ Atualiza valores e nomes conforme regra oficial
    PERFORM AtualizaValorFracionado(p_user_id, p_pedido_id, p_empresa_id);

    -- üîπ 5Ô∏è‚É£ Se houver borda/item adicional, insere e vincula
    SELECT * INTO v_borda
    FROM intencao_opcao
    WHERE referencia = v_ref
      AND categoria IN ('borda','item')
      AND user_id = p_user_id
      AND id_empresa = p_empresa_id
    LIMIT 1;

    IF FOUND THEN
      INSERT INTO item_pedido_temp (
        user_id,
        pedido_id,
        quantidade,
        tamanho,
        fracionada,
        tipo,
        categoria,
        nome,
        numero,
        pizza_referencia,
        valor,
        id_empresa,
        status,
        created_at
      )
      VALUES (
        p_user_id,
        p_pedido_id,
        COALESCE(v_borda.quantidade, 1),
        COALESCE(v_borda.tamanho, v_metade1.tamanho, 'grande'),
        FALSE,
        v_borda.tipo,
        v_borda.categoria,
        v_borda.nome,
        v_borda.numero,
        v_ref,
        COALESCE(v_borda.valor, 0),
        p_empresa_id,
        'inicio',
        NOW()
      );
    END IF;

    -- üîπ 6Ô∏è‚É£ Vincula borda/item √† pizza principal
    UPDATE item_pedido_temp AS ib
    SET id_pizza_pai = ip.item_id
    FROM item_pedido_temp AS ip
    WHERE ib.pizza_referencia = ip.pizza_referencia
      AND ib.categoria IN ('borda','item')
      AND ib.status = 'inicio'
      AND ip.status = 'inicio'
      AND ip.categoria = 'pizza'
      AND ib.user_id = ip.user_id
      AND ib.pedido_id = ip.pedido_id
      AND ib.id_empresa = ip.id_empresa
      AND ib.user_id = p_user_id
      AND ib.pedido_id = p_pedido_id
      AND ib.id_empresa = p_empresa_id;

    -- üîπ 7Ô∏è‚É£ Exclui todas as linhas da inten√ß√£o
    DELETE FROM intencao_opcao
    WHERE referencia = v_ref
      AND user_id = p_user_id
      AND id_empresa = p_empresa_id;
  END LOOP;

  -- üîπ 8Ô∏è‚É£ Conclui pr√©-pedido
  CALL ConcluiPrePedido(p_user_id, p_pedido_id, p_empresa_id);

  -- ‚úÖ Retorna true mesmo que n√£o haja fracionadas
  RETURN TRUE;
END;
$$;

GRANT EXECUTE ON FUNCTION PizzaFracionada(INT, INT, INT) TO PUBLIC;
