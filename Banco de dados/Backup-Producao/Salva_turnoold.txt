CREATE OR REPLACE FUNCTION salvar_opcoes_turno(
  p_user_id      integer,
  p_pedido_id    bigint,
  p_id_empresa   int,
  p_contexto     text,
  p_lista        jsonb,     -- JSONB array com objetos: {numero, nome, ...}
  p_ttl_min      int DEFAULT 15
)
RETURNS uuid
LANGUAGE plpgsql
AS $$
DECLARE
  v_lote uuid := gen_random_uuid();
  v_exp  timestamptz := now() + (p_ttl_min || ' minutes')::interval;
  v_i    int := 0;
  v_len  int;
  v_item jsonb;
  v_num  int;
  v_nome text;
BEGIN
  -- Limpa opções antigas desse contexto (mesmo usuário/pedido/empresa)
  DELETE FROM turno_opcoes
   WHERE user_id = p_user_id
     AND pedido_id = p_pedido_id
     AND id_empresa = p_id_empresa ;

  IF p_lista IS NULL OR jsonb_typeof(p_lista) <> 'array' THEN
    RAISE EXCEPTION 'p_lista deve ser um array JSONB';
  END IF;

  v_len := jsonb_array_length(p_lista);
  IF v_len = 0 THEN
    RAISE EXCEPTION 'Lista vazia';
  END IF;

  FOR v_i IN 0..(v_len-1) LOOP
    v_item := p_lista->v_i;
    v_num  := (v_item->>'numero')::int;
    v_nome := COALESCE(v_item->>'nome', v_item->>'numero', 'SEM_NOME');

    INSERT INTO turno_opcoes(
      user_id, pedido_id, id_empresa, contexto,
      lote_id, posicao, numero, nome, payload, expires_at
    ) VALUES (
      p_user_id, p_pedido_id, p_id_empresa, p_contexto,
      v_lote, v_i+1, v_num, v_nome, v_item, v_exp
    );
  END LOOP;

  RETURN v_lote;
END;
$$;
