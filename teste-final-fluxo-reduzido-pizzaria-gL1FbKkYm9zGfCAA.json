{"createdAt":"2025-09-18T15:44:58.320Z","updatedAt":"2025-09-22T01:08:06.555Z","id":"gL1FbKkYm9zGfCAA","name":"teste final fluxo reduzido pizzaria","active":false,"isArchived":false,"nodes":[{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.chatTrigger","typeVersion":1.3,"position":[-864,-1296],"id":"1ea74531-5006-4059-bc21-c31f29416ee7","name":"When chat message received","webhookId":"d8fabc58-bc32-4374-9024-6ddf8884d885"},{"parameters":{"operation":"executeQuery","query":"delete from item_pedido_temp where status <> 'concluido';","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[-592,-528],"id":"262d4433-ad79-4217-aeaa-116d5aee466b","name":"Execute a SQL query1","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":" SELECT rejeita_item( {{ $('DadoPedido').item.json.user_id }}, {{ $('DadoPedido').item.json.pedido_id }}  );","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[3168,-528],"id":"d5d30080-47a6-459c-b463-883f0f46f96a","name":"RejeitaItem","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"fieldToSplitOut":"output.bebidas","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[768,-832],"id":"7a608843-94ae-4a9d-8a55-9f4222a0f6ab","name":"Bebidas","notes":"TEMPLATE DESENVOLVIDO POR NOCODE STARTUP\nhttps://nocodestartup.io/\n\nFORMAÇÃO GESTOR DE AGENTES DE IA:\nhttps://nocodestartup.io/formacao-gestor-agentes-ia/"},{"parameters":{"fieldToSplitOut":" output.pizzas_fracionadas","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[768,-688],"id":"49dbeeb0-7863-4321-abc5-6aa8716b5d4c","name":"Pizzas Fracionada","notes":"TEMPLATE DESENVOLVIDO POR NOCODE STARTUP\nhttps://nocodestartup.io/\n\nFORMAÇÃO GESTOR DE AGENTES DE IA:\nhttps://nocodestartup.io/formacao-gestor-agentes-ia/"},{"parameters":{"fieldToSplitOut":"output.pizzas_inteiras","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[768,-544],"id":"e738ed86-7847-426a-928a-9dd96bf35e0a","name":"Pizzas Inteira","notes":"TEMPLATE DESENVOLVIDO POR NOCODE STARTUP\nhttps://nocodestartup.io/\n\nFORMAÇÃO GESTOR DE AGENTES DE IA:\nhttps://nocodestartup.io/formacao-gestor-agentes-ia/"},{"parameters":{"fieldToSplitOut":"output.esfirras","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[768,-400],"id":"158da210-0bc8-433a-9120-6fd036ad4d85","name":"Esfirra","notes":"TEMPLATE DESENVOLVIDO POR NOCODE STARTUP\nhttps://nocodestartup.io/\n\nFORMAÇÃO GESTOR DE AGENTES DE IA:\nhttps://nocodestartup.io/formacao-gestor-agentes-ia/"},{"parameters":{"tableId":"item_pedido_temp","fieldsUi":{"fieldValues":[{"fieldId":"user_id","fieldValue":"={{ $('MontPedido').item.json.user_id }}"},{"fieldId":"quantidade","fieldValue":"={{ $json.quantidade }}"},{"fieldId":"tipo","fieldValue":"bebida"},{"fieldId":"categoria","fieldValue":"bebida"},{"fieldId":"nome","fieldValue":"={{ $json.nome }}"},{"fieldId":"volume","fieldValue":"= {{ (($json.volume ?? '').toString().replace(/[\\s\\u00A0\\u200B-\\u200D\\uFEFF]+/g, '') === '')\n    ? ' volume desconhecido'\n    : ($json.volume ?? '').toString().replace(/[\\s\\u00A0\\u200B-\\u200D\\uFEFF]+/g, '') }}"},{"fieldId":"fracionada","fieldValue":"false"},{"fieldId":"pedido_id","fieldValue":"={{ $('MontPedido').item.json.pedido_id }}"},{"fieldId":"numero","fieldValue":"0"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[1024,-832],"id":"f7635034-812e-4fbd-aa0d-9042e5cc4409","name":"Itembebida","credentials":{"supabaseApi":{"id":"CcvRddDPb5xelxfb","name":"Supabase account"}}},{"parameters":{"tableId":"item_pedido_temp","fieldsUi":{"fieldValues":[{"fieldId":"user_id","fieldValue":"={{ $('MontPedido').item.json.user_id }}"},{"fieldId":"quantidade","fieldValue":"={{ $json.quantidade }}"},{"fieldId":"categoria","fieldValue":"pizza"},{"fieldId":"fracionada","fieldValue":"true"},{"fieldId":"numero","fieldValue":"= {{ $json.metade1 }}"},{"fieldId":"numero_fracao","fieldValue":"={{ $json.metade2 }}"},{"fieldId":"tamanho","fieldValue":"grande"},{"fieldId":"fracionada","fieldValue":"true"},{"fieldId":"pedido_id","fieldValue":"={{ $('MontPedido').item.json.pedido_id }}"},{"fieldId":"nome","fieldValue":"={{ $json.nome }}"},{"fieldId":"nome_fracao","fieldValue":"={{ $json.nome_fracao }}"},{"fieldId":"pizza_referencia","fieldValue":"={{$json.pizza_referencia.trim()}}"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[1024,-688],"id":"1a425d55-acc5-40b3-8035-6dea956073b8","name":"ItemFracionado","credentials":{"supabaseApi":{"id":"CcvRddDPb5xelxfb","name":"Supabase account"}}},{"parameters":{"tableId":"item_pedido_temp","fieldsUi":{"fieldValues":[{"fieldId":"user_id","fieldValue":"={{ $('MontPedido').item.json.user_id }}"},{"fieldId":"quantidade","fieldValue":"={{ $json.quantidade }}"},{"fieldId":"categoria","fieldValue":"pizza"},{"fieldId":"fracionada","fieldValue":"false"},{"fieldId":"numero","fieldValue":"={{ String($json.numero ?? '').trim() === '' ? null : $json.numero }}"},{"fieldId":"tamanho","fieldValue":"={{ $json.tamanho.toLowerCase() }}"},{"fieldId":"fracionada","fieldValue":"false"},{"fieldId":"pedido_id","fieldValue":"={{ $('MontPedido').item.json.pedido_id }}"},{"fieldId":"nome","fieldValue":"={{ $json.nome?.trim() === '' ? null : $json.nome }}"},{"fieldId":"pizza_referencia","fieldValue":"={{ $json.pizza_referencia }}"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[1024,-544],"id":"09a72d7a-7fcc-4cd4-97a6-28bd531c962c","name":"ItemInteira","credentials":{"supabaseApi":{"id":"CcvRddDPb5xelxfb","name":"Supabase account"}}},{"parameters":{"tableId":"item_pedido_temp","fieldsUi":{"fieldValues":[{"fieldId":"user_id","fieldValue":"={{ $('MontPedido').item.json.user_id }}"},{"fieldId":"quantidade","fieldValue":"={{ $json.quantidade }}"},{"fieldId":"tipo","fieldValue":"bebida"},{"fieldId":"categoria","fieldValue":"esfirra"},{"fieldId":"nome","fieldValue":"={{ $json.nome?.trim() === '' ? null : $json.nome }}"},{"fieldId":"tipo","fieldValue":"={{ $json.tipo?.trim() === '' ? null : $json.tipo }}"},{"fieldId":"fracionada","fieldValue":"false"},{"fieldId":"pedido_id","fieldValue":"={{ $('MontPedido').item.json.pedido_id }}"},{"fieldId":"numero","fieldValue":"={{ (String($json.numero ?? '').trim() === '' \n    || Number(String($json.numero).replace(',','.').trim()) === 0)\n  ? null \n  : $json.numero }}"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[1024,-400],"id":"59df7bdc-aed6-46b7-9f35-1a2bf7ec7cf3","name":"ItemEsfirra","credentials":{"supabaseApi":{"id":"CcvRddDPb5xelxfb","name":"Supabase account"}}},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.outputParserAutofixing","typeVersion":1,"position":[112,-384],"id":"b399cce6-9e20-4758-989a-b43190cb9942","name":"Auto-fixing Output Parser","notes":"TEMPLATE DESENVOLVIDO POR NOCODE STARTUP\nhttps://nocodestartup.io/\n\nFORMAÇÃO GESTOR DE AGENTES DE IA:\nhttps://nocodestartup.io/formacao-gestor-agentes-ia/"},{"parameters":{"operation":"executeQuery","query":"WITH ordenado AS (\n  SELECT \n    item_id,\n    user_id,\n    pedido_id,\n    ROW_NUMBER() OVER (PARTITION BY user_id, pedido_id ORDER BY item_id) AS nova_ordem\n  FROM item_pedido_temp\n)\nUPDATE item_pedido_temp i\nSET ordem_item = o.nova_ordem\nFROM ordenado o\nWHERE i.item_id = o.item_id\n  AND i.user_id = o.user_id\n  AND i.pedido_id = o.pedido_id \n   and i.user_id =   {{ $('DadoPedido').item.json.user_id }} \n  and i.pedido_id = {{ $('DadoPedido').item.json.pedido_id }}  and  status = 'concluido'  ;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[3616,-528],"id":"86faff93-e8fb-47a4-84e7-6d67471a8cd9","name":"OrdenaPedido","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":" UPDATE Item_pedido_temp AS i\nSET  status = 'concluido'\n \nWHERE  status = 'inicio' and\n    user_id =  {{ $('DadoPedido').item.json.user_id }} and i.pedido_id = {{ $('DadoPedido').item.json.pedido_id }} and i.numero <> 0 ;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[3408,-528],"id":"b5ebf3b9-d2df-4845-8e4c-e0c83e3097fa","name":"ConcluiTudo","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"fieldToSplitOut":"output.bordas","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[768,-128],"id":"e56769d0-adcf-4271-8573-80a1dc184634","name":"Bordas","notes":"TEMPLATE DESENVOLVIDO POR NOCODE STARTUP\nhttps://nocodestartup.io/\n\nFORMAÇÃO GESTOR DE AGENTES DE IA:\nhttps://nocodestartup.io/formacao-gestor-agentes-ia/"},{"parameters":{"numberInputs":6},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1792,-576],"id":"ec18115b-1dc9-4971-b260-adebc6788470","name":"Merge1","alwaysOutputData":false,"onError":"continueRegularOutput"},{"parameters":{"model":{"__rl":true,"value":"gpt-4.1-mini","mode":"list","cachedResultName":"gpt-4.1-mini"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[0,-32],"id":"29668865-9ed1-45b0-941b-049371b5e133","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"YvUoOPijIpNeTjed","name":"OpenAi account"}}},{"parameters":{"schemaType":"manual","inputSchema":" {\n  \"type\": \"object\",\n  \"properties\": {\n    \"pizzas_inteiras\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"quantidade\": { \"type\": \"integer\" },\n          \"numero\": { \"type\": \"integer\" },\n          \"tamanho\": { \"type\": \"string\" },\n           \"nome\": { \"type\": \"string\" },\n           \"pizza_referencia\":  { \"type\": \"string\" }\n          \n        },\n        \"required\": [\"quantidade\", \"numero\", \"tamanho\", \"pedido_id\"]\n      }\n    },\n    \"pizzas_fracionadas\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"quantidade\": { \"type\": \"integer\" },\n          \"metade1\": { \"type\": \"integer\" },\n          \"metade2\": { \"type\": \"integer\" },\n            \"nome\": { \"type\": \"string\" },\n            \"nome_fracao\": { \"type\": \"string\" },\n           \"pizza_referencia\":  { \"type\": \"string\" }\n         \n        },\n        \"required\": [\"quantidade\", \"metade1\", \"metade2\",\"pedido_id\"]\n      }\n    },\n    \"bebidas\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"quantidade\": { \"type\": \"integer\" },\n          \"nome\": { \"type\": \"string\" },\n          \"volume\": { \"type\": \"string\" }\n         \n        },\n        \"required\": [\"quantidade\", \"nome\", \"volume\",\"pedido_id\"]\n      }\n    },\n    \"esfirras\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"quantidade\": { \"type\": \"integer\" },\n          \"numero\": { \"type\": \"integer\" },\n          \"nome\": { \"type\": \"string\" },\n          \"tipo\": { \"type\": \"string\" }\n        },\n        \"required\": [\"quantidade\", \"numero\", \"nome\", \"tipo\"]\n      }\n    },\n    \"bordas\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"numero\": { \"type\": \"integer\" },\n          \"nome\": { \"type\": \"string\" } ,\n           \"pizza_referencia\":  { \"type\": \"string\" },\n          \"tamanho\": { \"type\": \"string\" }, \n          \"categoria\": { \"type\": \"string\" }\n\n\n\n\n  \n\n\n          \n         \n    },\n        \"required\": [\"numero\", \"pizza_referencia\"]\n      }\n    },\n    \"item\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": { \n          \"nome\": { \"type\": \"string\" } ,\n           \"pizza_referencia\":  { \"type\": \"string\" } \n          \n    },\n        \"required\": [\"nome\", \"pizza_pai\"]\n      }\n    }\n\n    \n  },\n  \"required\": [\n    \"pizzas_inteiras\",\n    \"pizzas_fracionadas\",\n    \"bebidas\",\n    \"esfirras\",\n    \"bordas\" \n  ]\n}\n"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[160,-224],"id":"8e713269-9051-4c42-82c1-636de7005114","name":"Structured Output Parser [Schema]","notes":"TEMPLATE DESENVOLVIDO POR NOCODE STARTUP\nhttps://nocodestartup.io/\n\nFORMAÇÃO GESTOR DE AGENTES DE IA:\nhttps://nocodestartup.io/formacao-gestor-agentes-ia/"},{"parameters":{"promptType":"define","text":"=<mensagem_do_usuario>\n {{ $('When chat message received').item.json.chatInput }}\n</mensagem_do_usuario>","hasOutputParser":true,"messages":{"messageValues":[{"message":"=  {\n  \"pizzas_inteiras\": [\n    { \"quantidade\": int, \"numero\": int, \"tamanho\": str , \"nome\": str, \"pizza_referencia\": str  }   // pizza_referencia é uma relação com a borda ou com item \n  ],\n  \"pizzas_fracionadas\": [\n    { \"quantidade\": int, \"metade1\": int, \"metade2\": int , \"nome\": str, \n\"nome_fracao\": str , \"pizza_referencia\": str }\n  ],\n  \"bebidas\": [\n    { \"quantidade\": int, \"nome\": str, \"volume\": str  }\n  ],\n \"esfirras\": [\n  { \"quantidade\": int, \"numero\": int, \"nome\": str, \"tipo\": str } // tipo: \"salgada\" ou \"doce\"\n  ],\n  \"bordas\": [\n   \n { \"numero\": int, \"nome\": str, \"pizza_referencia\": str , \"tamanho\": str, \"categoria\": str,  } // pizza_referencia é uma relação da borda com a pizza \n\n\n// \"pizza_referencia\" = string que identifica a pizza onde será aplicada\n  ]\n \"item\": [\n    { \"nome\": str , \"pizza_pai\": int } //  \n  ]\n\n\n}\n\n⚠️ Regras obrigatórias:\n- Sempre retorne exatamente essas 5 listas, mesmo que estejam vazias.\n- Use apenas os nomes de campos e estrutura mostrados acima.\n- Retorne **apenas o JSON válido**, sem explicações, comentários ou texto adicional.\n\nSe o usuário informar apenas ‘pizza N’, não descarte. Gere {quantidade:1, numero:N, tamanho:'media'} em pizzas_inteiras.”\n\n“Nunca omita itens ambíguos; use defaults: quantidade=1, tamanho='media'.”\n\n“Não valide com o cardápio. A validação será feita depois; sempre retorne o item.”\n\n\"A palavra uma , duas  refere-se sempre  quantidade  exemplo uma  pizza mussarela ou uma pizza presunto e queijo é quantidade..\"\n\n\n\nPrioridade de interpretação\n\nSe houver padrões de pizza fracionada no formato {Q? 1/2 A (e|,|+|/) 1/2 B}, crie um item em pizzas_fracionadas com {quantidade: Q || 1, metade1: A, metade2: B}.\n\nNunca crie pizzas_inteiras para números A ou B quando eles estiverem dentro de um padrão fracionado.\n\nSó trate “pizza N” (inteira) quando não fizer parte de um padrão 1/2 N.  \n\nSo trate   \"pizza\" se tiver explicito que se trata de \"pizza\"\n\nSo trate   \"esfirra \" se tiver explicito que se trata de \"esfirra\"\n\n\nRegras específicas para BORDAS (muito importante):\n- Se a mensagem contiver “borda”, o texto imediatamente após a palavra “borda”\n  até antes de “ao item”, “no item”, “item”, “pizza” ou o fim da frase, é o campo \"nome\".\n- Normalize espaços e minúsculas (ex.: \"Borda   Cheddar\" → nome: \"cheddar\").\n- Sempre preencha \"categoria\":\"borda\" e \"pizza_pai\" com o número do item/pizza alvo quando presente (ex.: \"item 1\" → pizza_pai: 1).\n- Não use o campo \"item[]\"; bordas devem ir apenas em \"bordas[]\".\n- Defaults para borda quando ausentes: numero=0, tamanho=\"\", pizza_referencia=\"\".\n\n\n\nExemplos:\n\n“1 pizza 1/2 14  e 1/2 21” → pizzas_fracionadas: [{quantidade:1, metade1:14, metade2:21, nome:'', nome_fracao: '' } ]\n\n“2 1/2 10, 1/2 15” → pizzas_fracionadas: [{quantidade:2, metade1:10, metade2:15 , nome:'', nome_fracao: '' }]\n\n“14 e 21” (sem 1/2) → pizzas_inteiras: [{q:1,n:14,media},{q:1,n:21,media }]\n\n\n\n“1 pizza 1/2 mussarela  e 1/2 presunto e queijo ” → pizzas_fracionadas: [{quantidade:1, metade1:0, metade2:0, nome:mussarela, nome_fracao: presunto e queijo } ]\n\n“1 pizza meia  mussarela  e meia  presunto e queijo ” → pizzas_fracionadas: [{quantidade:1, metade1:0, metade2:0, nome:mussarela, nome_fracao: presunto e queijo } ]\n\nSe o cliente disser meia  interprete como 1/2\n\n\n \nBebidas — defaults e sinônimos (obrigatório)\n\nSe o cliente disser “lata” e não informar volume, use 350ml.\n\nSe o cliente disser “long neck” e não informar volume, use 330ml.\n\nSe o cliente pedir coca/coca-cola sem volume, use 2l.\n\nNunca rejeite bebidas por falta de volume quando se aplicar uma regra acima.\n\nNormalize o campo volume sempre em minúsculas e sem espaços (ex.: 350ml, 330ml, 2l).\n\nExemplos\n\n“3 long neck heineken” → bebidas: [{ \"quantidade\": 3, \"nome\": \"heineken\", \"volume\": \"330ml\" }]\n\n“lata bud” → bebidas: [{ \"quantidade\": 1, \"nome\": \"budweiser\", \"volume\": \"350ml\" }]\n\n“2 coca” → bebidas: [{ \"quantidade\": 2, \"nome\": \"coca cola\", \"volume\": \"2l\" }]\nPedido:\n{pedido}\n\nquando numa string de comando tiver 1 pizza musssarela  1 borda chedaar na qual o codigo da pizza não for identifica,  crie no campo   \"pizza_referencia\" uma amarração entre 1 pizza mussarela e borda   \"pizza_referencia\" pode ser um codigo unico. Isso vale tambpem para pizza fracionada \n\n"}]}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.6,"position":[0,-560],"id":"03c7b5ef-890b-43ea-9e04-b190ee33affa","name":"Basic LLM Chain","retryOnFail":true,"notes":"TEMPLATE DESENVOLVIDO POR NOCODE STARTUP\nhttps://nocodestartup.io/\n\nFORMAÇÃO GESTOR DE AGENTES DE IA:\nhttps://nocodestartup.io/formacao-gestor-agentes-ia/"},{"parameters":{"fieldToSplitOut":"output.item","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[768,-272],"id":"52506e17-3640-4a5c-97f2-d75318f09678","name":"item4","notes":"TEMPLATE DESENVOLVIDO POR NOCODE STARTUP\nhttps://nocodestartup.io/\n\nFORMAÇÃO GESTOR DE AGENTES DE IA:\nhttps://nocodestartup.io/formacao-gestor-agentes-ia/"},{"parameters":{"tableId":"item_pedido_temp","fieldsUi":{"fieldValues":[{"fieldId":"user_id","fieldValue":"={{ $('MontPedido').item.json.user_id }}"},{"fieldId":"quantidade","fieldValue":"=1"},{"fieldId":"tipo","fieldValue":"item"},{"fieldId":"categoria","fieldValue":"item"},{"fieldId":"nome","fieldValue":"={{ $json.nome?.trim() === '' ? null : $json.nome }}"},{"fieldId":"numero","fieldValue":"=0"},{"fieldId":"fracionada","fieldValue":"=false"},{"fieldId":"pedido_id","fieldValue":"={{ $('MontPedido').item.json.pedido_id }}"},{"fieldId":"tamanho","fieldValue":"=0"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[1024,-272],"id":"5f4ecb21-f345-44c7-92f8-9be2a993f5f8","name":"Item4","credentials":{"supabaseApi":{"id":"CcvRddDPb5xelxfb","name":"Supabase account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT AtualizaValorFracionado(  {{ $('DadoPedido').item.json.user_id }},{{ $('DadoPedido').item.json.pedido_id }});","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2944,-528],"id":"a381a11d-a7c7-4aa3-aa57-c6a67985f4bb","name":"AtualizaValorPizzaFracionada2","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT   atualizar_valores_itens_temp( {{ $('DadoPedido').item.json.user_id }},{{ $('DadoPedido').item.json.pedido_id }} );","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2720,-528],"id":"157dbe1e-050f-456b-ac79-2d88e1607752","name":"AtualizaValorItem2","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"tableId":"item_pedido_temp","fieldsUi":{"fieldValues":[{"fieldId":"user_id","fieldValue":"={{ $('MontPedido').item.json.user_id }}"},{"fieldId":"quantidade","fieldValue":"=1"},{"fieldId":"tipo","fieldValue":"borda"},{"fieldId":"categoria","fieldValue":"borda"},{"fieldId":"nome","fieldValue":"={{ $('Bordas').item.json.nome }}"},{"fieldId":"numero","fieldValue":"={{ $json.numero ? $json.numero : 0 }}"},{"fieldId":"fracionada","fieldValue":"=false"},{"fieldId":"pedido_id","fieldValue":"={{ $('MontPedido').item.json.pedido_id }}"},{"fieldId":"tamanho","fieldValue":"={{ $json.tamanho }}"},{"fieldId":"pizza_referencia","fieldValue":"={{ $json.pizza_referencia }}"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[1024,-128],"id":"754e1ee8-60ce-4a79-9dc7-aa77cf2359e8","name":"Item5","credentials":{"supabaseApi":{"id":"CcvRddDPb5xelxfb","name":"Supabase account"}}},{"parameters":{"assignments":{"assignments":[{"id":"a3c83333-8ce3-4995-8230-b361099aa1e4","name":"user_id","value":72,"type":"number"},{"id":"d7c14753-505f-48ee-a344-fa565ace43df","name":"pedido_id","value":16,"type":"number"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-208,-528],"id":"a6418514-62bb-4f8a-b1e3-7debd49a46c5","name":"MontPedido"},{"parameters":{"assignments":{"assignments":[{"id":"8033b503-a34e-4682-a40a-b60b315714e6","name":"user_id","value":"={{ $json.user_id }}","type":"number"},{"id":"bd4fde4d-0d15-4271-945c-571b24973379","name":"pedido_id","value":"={{ $json.pedido_id }}","type":"number"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2032,-528],"id":"8373ecb1-043b-4540-895e-8bb63b1ffe3a","name":"DadoPedido","executeOnce":true},{"parameters":{"operation":"executeQuery","query":"call valida_nome_item_pedido( {{ $json.user_id }} , {{ $json.pedido_id }});","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2224,-528],"id":"fe8bc0da-85fc-4616-8f56-8b2747cc414e","name":"ValidaItemNome","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"resource":"messages-api","instanceName":"delivery","remoteJid":"= {{$('Dados Lead').first().json.IdConversa}}","messageText":"= {{ $json.texto_alinhado }}","options_message":{}},"type":"n8n-nodes-evolution-api.evolutionApi","typeVersion":1,"position":[2432,-1312],"id":"10406ba5-51dd-442c-8de1-aebbdba35711","name":"MenuCardapio10","credentials":{"evolutionApi":{"id":"ApqS5DPziUrzonYT","name":"Evolution account"}}},{"parameters":{"jsCode":" const raw = ($json.calcula_pre_pedido || \"\").replace(/\\r\\n/g, \"\\n\");\nconst txt = raw.trim();\n\nif (!txt) {\n  return { texto_alinhado: \"não existe registro\" };\n}\n\nconst lines = txt.split(\"\\n\").map(l => l.trimEnd());\n\n// Se não tiver \"Resumo:\", devolve o corpo original\nconst start = lines.findIndex(l => /resumo:/i.test(l));\nif (start === -1) {\n  return { texto_alinhado: txt };\n}\n\nlet end = lines.findIndex((l, i) => i > start && (\n  /forma de pagamento/i.test(l) || /entrega:/i.test(l) || /total:/i.test(l) || /total de itens/i.test(l)\n));\nif (end === -1) end = lines.length;\n\nconst header = lines.slice(0, start + 1);\nconst itemLines = lines.slice(start + 1, end).filter(l => l.trim());\nconst footer = lines.slice(end);\n\n// ---- parsing ajustado ----\nconst parsed = itemLines.map(line => {\n  const match = line.match(/(R\\$\\s*[\\d\\.,]+)$/);\n  if (!match) return { num: \"\", desc: line.trim(), valor: \"\" };\n\n  const valor = match[1].replace(\"R$\", \"\").trim();\n  const left = line.slice(0, match.index).trim();\n\n  // captura do número inicial (ex: (1) Nome ...)\n  const numMatch = left.match(/^\\((\\d+)\\)\\s*(.*)$/);\n  let num = \"\", desc = left;\n  if (numMatch) {\n    num = numMatch[1];\n    desc = numMatch[2].trim();\n  }\n\n  return { num, desc, valor };\n});\n\nconst maxNum = parsed.reduce((m, o) => Math.max(m, o.num.length), 0);\nconst maxDesc = parsed.reduce((m, o) => Math.max(m, o.desc.length), 0);\n\n// monta itens alinhados com cabeçalho\nconst itensAlinhados = [\n  \"Item \".padEnd(maxNum + 2, \" \") +\n  \"Descrição\".padEnd(maxDesc + 4, \" \") +\n  \"Valor\"\n];\n\nparsed.forEach(o => {\n  itensAlinhados.push(\n    o.num.padEnd(maxNum + 2, \" \") +\n    o.desc.padEnd(maxDesc + 4, \" \") +\n    \"R$ \" + o.valor\n  );\n});\n\n// ---- corpo final ----\nconst corpo = [\n  ...header,\n  ...itensAlinhados,\n  ...footer\n].join(\"\\n\");\n\nreturn { texto_alinhado: \"```\\n\" + corpo + \"\\n```\" };\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2224,-1312],"id":"bc5d27b1-c892-437b-9ebf-a0000affef2d","name":"Code5"},{"parameters":{"jsCode":" const input =  $input.first().json.chatInput || \"\";\n\n// Normaliza\nconst frase = input.toLowerCase().replace(/\\s+/g, \" \").trim();\n\nconst result = {\n  pizzas_inteiras: [],\n  pizzas_fracionadas: [],\n  bebidas: [],\n  bordas: []\n};\n\n// Quebra em pedaços por \" e \", \" , \", \" + \" etc\nconst partes = frase.split(/,| e | \\+ | \\/ /).map(p => p.trim()).filter(Boolean);\n\nfor (let p of partes) {\n  let qtd = 1;\n  const qtdMatch = p.match(/^(\\d+)/);\n  if (qtdMatch) qtd = parseInt(qtdMatch[1]);\n\n  // 🍕 Fracionada\n  if (p.includes(\"1/2\")) {\n    const fracoes = p.split(/1\\/2/).map(f => f.trim()).filter(Boolean);\n    if (fracoes.length === 2) {\n      result.pizzas_fracionadas.push({\n        quantidade: qtd,\n        metade1: isNaN(fracoes[0]) ? fracoes[0] : parseInt(fracoes[0]),\n        metade2: isNaN(fracoes[1]) ? fracoes[1] : parseInt(fracoes[1]),\n        tamanho: \"media\"\n      });\n    }\n  }\n\n  // 🧀 Borda\n  else if (p.includes(\"borda\")) {\n    result.bordas.push({\n      quantidade: qtd,\n      nome: p.replace(/borda|pizza|item|\\d+/gi, \"\").trim(),\n      pizza_referencia: \"\"\n    });\n  }\n\n  // 🥤 Bebidas\n  else if (p.includes(\"coca\") || p.includes(\"refrigerante\") || p.includes(\"guaraná\") || p.includes(\"suco\")) {\n    let volume = \"\";\n    if (p.includes(\"2l\")) volume = \"2l\";\n    else if (p.includes(\"350ml\") || p.includes(\"lata\")) volume = \"350ml\";\n    else if (p.includes(\"330ml\") || p.includes(\"long neck\")) volume = \"330ml\";\n\n    result.bebidas.push({\n      quantidade: qtd,\n      nome: p.replace(/\\d+|coca|cola|refrigerante|guaraná|suco|lata|long neck|ml|l/gi, \"\").trim(),\n      volume: volume || \"2l\"\n    });\n  }\n\n  // 🍕 Pizza inteira\n  else if (p.includes(\"pizza\")) {\n    let tamanho = \"media\";\n    if (p.includes(\"grande\")) tamanho = \"grande\";\n    else if (p.includes(\"brotinho\")) tamanho = \"brotinho\";\n\n    const numeroMatch = p.match(/(\\d+)/);\n    if (numeroMatch) {\n      result.pizzas_inteiras.push({\n        quantidade: qtd,\n        numero: parseInt(numeroMatch[1]),\n        tamanho\n      });\n    } else {\n      result.pizzas_inteiras.push({\n        quantidade: qtd,\n        nome: p.replace(/\\d+|pizza|grande|media|brotinho/gi, \"\").trim(),\n        tamanho\n      });\n    }\n  }\n}\n\nreturn [{ json: result }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-768,-528],"id":"0255a680-b4f6-4b28-b9c0-9fa8c31aeabc","name":"Code"},{"parameters":{"resource":"messages-api","instanceName":"=delivery","remoteJid":"= {{$('Dados Lead').first().json.IdConversa}}","messageText":"={{$json.mensagem}}\n","options_message":{"delay":4}},"type":"n8n-nodes-evolution-api.evolutionApi","typeVersion":1,"position":[3328,-1312],"id":"05813221-b1d8-4a04-bf03-3a4ee752daa8","name":"MenuCardapio40","credentials":{"evolutionApi":{"id":"ApqS5DPziUrzonYT","name":"Evolution account"}}},{"parameters":{"jsCode":" // ===== Emojis =====\nconst HDR_EMOJI  = '🔹';\nconst DESC_EMOJI = '▫️';\n\n// -------- Helpers --------\nfunction toNum(x) {\n  if (typeof x === 'number' && isFinite(x)) return x;\n  if (x == null) return 0;\n  const s = String(x).replace(/[^\\d,.-]/g, '').replace(/\\.(?=\\d{3}(?:\\D|$))/g, '').replace(',', '.');\n  const n = Number(s);\n  return isFinite(n) ? n : 0;\n}\nfunction moneyTrim(n) {\n  const s = toNum(n).toFixed(2).replace(/(\\.\\d*?)0+$/, '$1').replace(/\\.$/, '');\n  return s;\n}\nfunction clean(txt) {\n  return String(txt || '')\n    .replace(/\\uFFFD/g, '')\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g,'')\n    .replace(/\\s*-\\s*/g, ' - ')\n    .replace(/[ \\t]+/g, ' ')\n    .trim();\n}\nconst bold = s => `*${s}*`;\n\n// -------- Inferência de Categoria & Tipo --------\nconst BEBIDAS_RX = /\\b(coca(?:\\s*cola)?|guaran[aá]|heineken|bud(?:weiser)?|cerveja|água|agua|fanta|sprite|pepsi|refrigerante|long\\s*neck|lata)\\b/i;\nconst BORDA_RX   = /\\bborda\\b/i;\nconst ESFIRRA_RX = /\\besfirra\\b/i;\n\nconst DOCES_RX = /\\b(chocolate|nutella|goiabada|doce\\s+de\\s+leite|brigadeiro|beijinho|romeu\\s*e\\s*julieta|banana|morango|paçoca|pacoca|prestígio|prestigio)\\b/i;\n\nfunction guessCategoria(nome, desc, cat) {\n  if (cat && String(cat).trim()) return String(cat).toLowerCase(); // já veio do backend\n  const hay = `${nome} ${desc}`;\n  if (BEBIDAS_RX.test(hay)) return 'bebida';\n  if (BORDA_RX.test(hay))   return 'borda';\n  if (ESFIRRA_RX.test(hay)) return 'esfirra';\n  return 'pizza'; // default\n}\n\nfunction guessTipo(nome, desc, tipo) {\n  if (tipo && String(tipo).trim()) return String(tipo).toLowerCase();\n  const hay = `${nome} ${desc}`;\n  return DOCES_RX.test(hay) ? 'doce' : 'salgada';\n}\n\n// -------- Entrada --------\nconst items = $input.all();\nlet rows = [];\nif (items.length > 1) rows = items.map(i => i.json);\nelse {\n  let p = items?.[0]?.json ?? {};\n  if (p && typeof p === 'object' && 'result' in p) p = p.result;\n  rows = Array.isArray(p) ? p : (p && typeof p === 'object' ? [p] : []);\n}\n\n// -------- Saída formatada --------\nconst lines = rows.map(r => {\n  const numero = r.numero ?? r.id ?? r.code ?? '';\n  const nome   = clean(r.nome ?? r.name ?? 'Item');\n  const desc   = clean(r.descricao ?? r.description ?? '');\n\n  const g = r.preco_grande ?? r.precoG ?? r.preco_g;\n  const m = r.preco_media  ?? r.precoM ?? r.preco_m;\n\n  const categoria = guessCategoria(nome, desc, r.categoria);\n  const tipo      = guessTipo(nome, desc, r.tipo);\n\n  const parts = [];\n  if (g != null && g !== '') parts.push(`(G) R$${moneyTrim(g)}`);\n  if (m != null && m !== '') parts.push(`(M) R$${moneyTrim(m)}`);\n  const precoStr = parts.join(' / ') || 'R$0';\n\n  const header = `${HDR_EMOJI} ${ bold(`(${numero})`) } ${nome} – ${bold(precoStr)} ${bold(` [${categoria}] [${tipo}]`)}`;\n  const body   = `${DESC_EMOJI} Descrição: ${desc || '-'}`\n  return `${header}\\n${body}`;\n});\n\nreturn [{\n  json: {Opções: \"Opções dos itens não encontrados\\n\",\n    descricao: lines.join('\\n'),\n    user_id: $json.user_id ?? null,\n    pedido_id: $json.pedido_id ?? null\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2896,-1312],"id":"0eaa0e8a-be3b-48f5-af58-245debcfeedb","name":"VariasPizzas1"},{"parameters":{"jsCode":" const descricao = $json.descricao || \"\";\nreturn {\n  mensagem: \"```\\n\" +  \"Suas opções dos itens não encontrados:\\nDois exemplos validos: 1 pizza 32 grande ou 1 pizza 1/2 14 e meia 12\\nEscolha sua opção abaixo ⬇️\\n\\n\" +   descricao + \" ```\"\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3088,-1312],"id":"e7972fe9-b687-4292-bce3-792f58828e6c","name":"Code13"},{"parameters":{"assignments":{"assignments":[{"id":"9f488c5c-0b3b-48e9-87b1-5a22d513d1ec","name":"IdConversa","value":"=5516992975836","type":"string"}]},"options":{}},"id":"63df038e-25e8-410b-8781-94308aa7e0c4","name":"Dados Lead","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-400,-528],"notes":"TEMPLATE DESENVOLVIDO POR NOCODE STARTUP\nhttps://nocodestartup.io/\n\nFORMAÇÃO GESTOR DE AGENTES DE IA:\nhttps://nocodestartup.io/formacao-gestor-agentes-ia/"},{"parameters":{"model":{"__rl":true,"mode":"list","value":"gpt-4.1-mini"},"options":{"temperature":0.1}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[3760,-272],"id":"9b8d34e4-e87d-4570-970a-8b413af3ddbf","name":"OpenAI Chat Model1","credentials":{"openAiApi":{"id":"YvUoOPijIpNeTjed","name":"OpenAi account"}}},{"parameters":{"sessionIdType":"customKey","sessionKey":"23232313233223","contextWindowLength":3},"type":"@n8n/n8n-nodes-langchain.memoryBufferWindow","typeVersion":1.3,"position":[3888,-288],"id":"b4ddbccd-8ad3-4b46-ab8b-ce88beab4a3b","name":"Simple Memory"},{"parameters":{"operation":"executeQuery","query":" select calcula_pre_pedido({{ $('DadoPedido').item.json.user_id }}, {{ $('DadoPedido').item.json.pedido_id }}  );","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1984,-1312],"id":"2cf0ee35-f685-43fc-8f84-7ecfc3c9c52c","name":"GetCarrinhoFlx","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":" \n\n\n   SELECT  'não fracionado' , * FROM busca_cardapio( ( SELECT string_agg(num, ', ')\n \n  FROM ( select  distinct c.numero::text AS num\n \n        FROM item_pedido_temp AS i2\n        LEFT JOIN cardapio AS c\n          ON c.categoria in( 'pizza', 'item','borda')\n         AND c.nome ILIKE '%' || TRIM(i2.nome) || '%'\n        WHERE i2.status = 'opcoes'\n          AND i2.user_id = {{ $('DadoPedido').item.json.user_id }}    \n          AND i2.pedido_id =  {{ $('DadoPedido').item.json.pedido_id }}   \n          AND i2.numero = 0 and\n          c.categoria  = i2.categoria and i2.fracionada = false )  \n   )\n   )\n\n  \n\n    union   all    SELECT 'Fracionado', * FROM busca_cardapio( ( SELECT string_agg(num, ', ')\n \n  FROM ( select  distinct c.numero::text AS num\n \n        FROM item_pedido_temp AS i2\n        LEFT JOIN cardapio AS c\n          ON c.categoria in( 'pizza', 'item','borda')\n         AND c.nome ILIKE '%' || TRIM(i2.nome) || '%'\n        WHERE i2.status = 'opcoes'\n          AND i2.user_id = {{ $('DadoPedido').item.json.user_id }}\n          AND i2.pedido_id =  {{ $('DadoPedido').item.json.pedido_id }}\n          AND i2.numero = 0 and\n          c.categoria  = i2.categoria and i2.fracionada = true  )  \n   )\n   )\n\n\n    union   all    SELECT 'Fracionado', * FROM busca_cardapio( ( SELECT string_agg(num, ', ')\n \n  FROM ( select  distinct c.numero::text AS num\n \n        FROM item_pedido_temp AS i2\n        LEFT JOIN cardapio AS c\n          ON c.categoria in( 'pizza', 'item','borda')\n         AND c.nome ILIKE '%' || TRIM(i2.nome_fracao) || '%'\n        WHERE i2.status = 'opcoes'\n          AND i2.user_id =  {{ $('DadoPedido').item.json.user_id }}  \n          AND i2.pedido_id =    {{ $('DadoPedido').item.json.pedido_id }}\n          AND i2.numero_fracao = 0 and\n          c.categoria  = i2.categoria and i2.fracionada = true  )  \n   )\n   )","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2688,-1312],"id":"6a4b54f9-02ac-4076-9fbd-c51cea1a1f8d","name":"GetNEncontradoFxl","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"\nselect numero, tamanho, fracionada, categoria, nome,  \n(case when categoria <> 'bebida' then '' else volume end)  , status, valor  from item_pedido_temp where status not in ('opcoes', 'concluido')\nand user_id =    {{ $('DadoPedido').item.json.user_id }} \nand pedido_id =  {{ $('DadoPedido').item.json.pedido_id }}","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1728,-1296],"id":"784770ff-1d07-4964-8ad8-145716e974d3","name":"GetNãoEncontrado","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"resource":"messages-api","instanceName":"=delivery","remoteJid":"= {{$('Dados Lead').first().json.IdConversa}}","messageText":"=```{{ $json.output }}```","options_message":{"delay":4}},"type":"n8n-nodes-evolution-api.evolutionApi","typeVersion":1,"position":[4256,-560],"id":"d942bd11-aad4-4a6e-aba8-6544cb118f2a","name":"MenuCardapio","credentials":{"evolutionApi":{"id":"ApqS5DPziUrzonYT","name":"Evolution account"}}},{"parameters":{"operation":"executeQuery","query":"\nselect numero, tamanho, fracionada, categoria, nome,  \n(case when categoria <> 'bebida' then '' else volume end)  , status, valor  from item_pedido_temp where status  ='rejeitado'\nand user_id =    {{ $('DadoPedido').item.json.user_id }} \nand pedido_id =  {{ $('DadoPedido').item.json.pedido_id }}","options":{}},"type":"n8n-nodes-base.postgresTool","typeVersion":2.6,"position":[4144,-288],"id":"a924e254-623b-401d-a3b7-3c07de02ad05","name":"GetProblemas","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":" \n\n\n   SELECT  'não fracionado' , * FROM busca_cardapio( ( SELECT string_agg(num, ', ')\n \n  FROM ( select  distinct c.numero::text AS num\n \n        FROM item_pedido_temp AS i2\n        LEFT JOIN cardapio AS c\n          ON c.categoria in( 'pizza', 'item','borda')\n         AND c.nome ILIKE '%' || TRIM(i2.nome) || '%'\n        WHERE i2.status = 'opcoes'\n          AND i2.user_id = {{ $('DadoPedido').item.json.user_id }}    \n          AND i2.pedido_id =  {{ $('DadoPedido').item.json.pedido_id }}   \n          AND i2.numero = 0 and\n          c.categoria  = i2.categoria and i2.fracionada = false )  \n   )\n   )\n\n  \n\n    union   all    SELECT 'Fracionado', * FROM busca_cardapio( ( SELECT string_agg(num, ', ')\n \n  FROM ( select  distinct c.numero::text AS num\n \n        FROM item_pedido_temp AS i2\n        LEFT JOIN cardapio AS c\n          ON c.categoria in( 'pizza', 'item','borda')\n         AND c.nome ILIKE '%' || TRIM(i2.nome) || '%'\n        WHERE i2.status = 'opcoes'\n          AND i2.user_id = {{ $('DadoPedido').item.json.user_id }}\n          AND i2.pedido_id =  {{ $('DadoPedido').item.json.pedido_id }}\n          AND i2.numero = 0 and\n          c.categoria  = i2.categoria and i2.fracionada = true  )  \n   )\n   )\n\n\n    union   all    SELECT 'Fracionado', * FROM busca_cardapio( ( SELECT string_agg(num, ', ')\n \n  FROM ( select  distinct c.numero::text AS num\n \n        FROM item_pedido_temp AS i2\n        LEFT JOIN cardapio AS c\n          ON c.categoria in( 'pizza', 'item','borda')\n         AND c.nome ILIKE '%' || TRIM(i2.nome_fracao) || '%'\n        WHERE i2.status = 'opcoes'\n          AND i2.user_id =  {{ $('DadoPedido').item.json.user_id }}  \n          AND i2.pedido_id =    {{ $('DadoPedido').item.json.pedido_id }}\n          AND i2.numero_fracao = 0 and\n          c.categoria  = i2.categoria and i2.fracionada = true  )  \n   )\n   )","options":{}},"type":"n8n-nodes-base.postgresTool","typeVersion":2.6,"position":[4256,-288],"id":"75ed7fd2-e03e-46bc-a36e-7015dd00fbbc","name":"GetOpcoes","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"  select calcula_pre_pedido({{ $('DadoPedido').item.json.user_id }}, {{ $('DadoPedido').item.json.pedido_id }}  );","options":{}},"type":"n8n-nodes-base.postgresTool","typeVersion":2.6,"position":[4016,-288],"id":"11117d42-0441-4708-b771-ddacf0ea0356","name":"GetCarrinho","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":" \n\nUPDATE item_pedido_temp AS ib\nSET id_pizza_pai = ip.item_id\nFROM item_pedido_temp AS ip\nWHERE ib.pizza_referencia IS NOT NULL\n  AND LENGTH(TRIM(ib.pizza_referencia)) > 1\n  AND ib.status = 'inicio'\n  AND ib.categoria IN ('item','borda')\n  AND ip.pizza_referencia IS NOT NULL\n  AND LENGTH(TRIM(ip.pizza_referencia)) > 1\n  AND ip.status = 'inicio'\n  AND ip.categoria = 'pizza'\n  AND ib.user_id = ip.user_id\n  AND ib.pedido_id = ip.pedido_id\n  AND ib.user_id =  {{ $('DadoPedido').item.json.user_id }} \n  AND ib.pedido_id =  {{ $('DadoPedido').item.json.pedido_id }}\n  AND ib.pizza_referencia = ip.pizza_referencia;\n\n ","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2480,-528],"id":"623d8730-7d3e-4b28-b8f2-47db6bc22d80","name":"VinculaBordaItemPizza","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"promptType":"define","text":"Você é um assistente pos venda de pizzaria a La Cantinha. Seggue pedido do usuario    {{ $('When chat message received').item.json.chatInput }}","options":{"systemMessage":"=# Persona\nVocê é um atendente de pizzaria responsável por revisar pedidos antes da finalização.  \nSeu papel é **mostrar o carrinho consolidado**, **guiar o cliente na escolha de opções** quando houver mais de uma, e **avisar se houve itens rejeitados ou não encontrados**.  \nVocê nunca deve inventar itens ou preços.\n\n# Regras de Atendimento\n1. Use sempre os valores de `user_id` e `pedido_id` já fornecidos pelo fluxo.  \n   Nunca pergunte esses dados ao cliente.  \n2. Sempre chame **exatamente uma vez** na ordem:  \n   - Primeiro: GetCarrinho()  \n   - Depois: GetOpcoes()  \n   - Depois: GetProblemas()  \n3. Nunca repita a mesma tool mais de uma vez na mesma resposta.  \n4. Depois de executar as tools necessárias, finalize a resposta.  \n5. Mostre os resultados em etapas claras:  \n   - Primeiro carrinho ✅  \n   - Depois opções ✅  \n   - Depois problemas ⚠️  \n6. Sempre finalize a resposta com um fechamento simpático, ex:  \n   - “Esses são os detalhes do seu pedido até agora. Deseja continuar ou finalizar?”\n\n# Tools disponíveis\n- GetCarrinho()\n- GetOpcoes()\n- GetProblemas()\n\n# Restrições\n- Nunca invente dados de cardápio ou preços.  \n- Nunca pule nenhuma das três etapas.  \n- Nunca repita tool em loop.  \n- Nunca peça user_id ou pedido_id ao cliente.  \n- Sempre use linguagem simpática, clara e objetiva.  \n- Encerre a resposta após usar as três tools necessárias.\n\n# Regras Carrinho\n- Quando usar GetCarrinho, mostre o resultado exatamente como recebido.\n- Nunca agrupe, resuma ou ocultar bordas, itens ou pizzas.\n- Sempre mantenha os números do carrinho.\n-  Não omita nenhum numero do carrinho. è muito importante mostrar o numero da pizza.\nExemplo:\n\n1  (22) Pizzaiolo (media)-pizza                           R$ 36.50\n2  1/2 (45) Confete 1/2 (34) Marguerita (grande)-pizza    R$ 64.00\n3  skol (grande)-bebida                                   R$ 12.00\n4  (12) Salaminho (media)-pizza                           R$ 38.50\n5  (22) Pizzaiolo (grande)-pizza                          R$ 61.00\n6  (1) Mussarela (media)-pizza                            R$ 32.00\n7  (21) Bacon (grande)-pizza                              R$ 57.00\n8  (11) Milho Verde (media)-pizza                         R$ 37.80\n9  coca cola (grande)-bebida                              R$ 13.00\nNão omita esses numeros (22)\nNão omita nada  a pizza Mussarela (grande)-pizza   é a numero (1)\nEmm resumo não omita nada nem borda nem item nem refrigerante\n\n# Regras Opções \n- Quando usar GetOpcoes, mostre o resultado exatamente como recebido.\n- Se voltar mais de uma linha na função diga , encontramos mais opções no nosso cardápio\nou algo assim. Tente criar uma frase bem curta mas expressiva.\n- Nunca agrupe, resuma ou ocultar bordas, itens ou pizzas.\n- tente identificar na frase  {{ $('When chat message received').item.json.chatInput }} qual o item que gerou mais de uma opção  . Se na frase tiver frango e as oopções tiver frango com catupiry diga que encontrou mais de uma opção com o item frango .\n- Sempre mantenha os números das pizzas  , muito importante para fazzer uma boa compra.\n-Mostre um exemplo de compra 1 pizza 23 grande onde 23 é uma das pizzas das opções.  \n- Faça sugestão não peça confirmação , Mostre um exemplo . Não esqueça do exemplo. de dois \\n para mostrar o exemplo.  \nLembre-se vc não é a IA que vai receber este comando.\n \n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[3840,-560],"id":"dcbc6ca6-77b5-4a9a-ac3e-70273f9e0204","name":"Agente Pos Venda","executeOnce":true},{"parameters":{"promptType":"define","text":"={{ $('When chat message received').item.json.chatInput }}","options":{"systemMessage":"= # Persona\nVocê é um atendente de pizzaria responsável por fechar pedidos de forma organizada e simpática.  \nSeu papel é colher os dados finais (endereço, bairro, forma de pagamento e comentário), salvar cada um deles usando as ferramentas disponíveis e, somente quando tudo estiver confirmado, executar o fechamento do pedido.\n\n# Regras de Atendimento\n1. Ordem obrigatória de coleta:\n   - Primeiro: Endereço completo (rua + número) e Bairro → use SalvaEndereco(user_id, pedido_id, endereco, bairro).\n   - Depois: Forma de pagamento → use SalvaFormaPagto(user_id, pedido_id, forma_pagto).\n   - Depois: Comentário ou observações → use Comentario(user_id, pedido_id, comentario).\n   - Por último: Execute Fechamento(user_id, pedido_id).\n2. Sempre valide se o cliente forneceu a informação correta.  \n   - Se faltar algo (ex: o cliente manda só a rua sem bairro), peça novamente de forma clara e curta.\n3. Somente quando endereço, bairro, forma de pagamento e comentário tiverem sido salvos com sucesso, execute Fechamento().\n4. Se alguma tool retornar erro, informe o cliente e peça o dado novamente.\n5. Nunca finalize o pedido sem executar Fechamento().\n6. Nunca invente dados; sempre utilize o que o cliente informou.\n7. Use uma linguagem simpática e objetiva.\n\n# Tools disponíveis\n- SalvaEndereco(user_id, pedido_id, endereco, bairro)\n- SalvaFormaPagto(user_id, pedido_id, forma_pagto)\n- Comentario(user_id, pedido_id, comentario)\n- Fechamento(user_id, pedido_id)\n\n# Fluxo esperado\n1. Perguntar endereço e bairro → chamar SalvaEndereco().\n2. Perguntar forma de pagamento → chamar SalvaFormaPagto().\n3. Perguntar se há comentário ou observação extra → chamar Comentario().\n4. Confirmar que tudo foi salvo com sucesso.\n5. Executar Fechamento() e avisar o cliente que o pedido foi finalizado com sucesso 🎉.\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[-464,-1296],"id":"ad59e662-f3b3-4946-b211-c4d37f4bf9b1","name":"AI Agent"},{"parameters":{"model":{"__rl":true,"mode":"list","value":"gpt-4.1-mini"},"options":{"temperature":0.1}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[-576,-1072],"id":"0f56742b-affa-497c-bde4-75bf60479a63","name":"OpenAI Chat Model2","credentials":{"openAiApi":{"id":"YvUoOPijIpNeTjed","name":"OpenAi account"}}},{"parameters":{"sessionIdType":"customKey","sessionKey":"43534543534","contextWindowLength":3},"type":"@n8n/n8n-nodes-langchain.memoryBufferWindow","typeVersion":1.3,"position":[-448,-1088],"id":"f5e05165-597b-4bc3-aa8c-f577775e46a5","name":"Simple Memory1"},{"parameters":{"operation":"update","tableId":"usuario_lacantina","filters":{"conditions":[{"keyName":"user_id","condition":"eq","keyValue":"={{ $json.user_id }}"}]},"fieldsUi":{"fieldValues":[{"fieldId":"endereço","fieldValue":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fieldValues0_Field_Value', `endereço `, 'string') }}"},{"fieldId":"bairro","fieldValue":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fieldValues1_Field_Value', `bairro`, 'string') }}"}]}},"type":"n8n-nodes-base.supabaseTool","typeVersion":1,"position":[-32,-1088],"id":"5dd9d402-25cd-475b-88a2-bfd4d571b918","name":"SalvaEndereco","credentials":{"supabaseApi":{"id":"CcvRddDPb5xelxfb","name":"Supabase account"}}},{"parameters":{"assignments":{"assignments":[{"id":"a3c83333-8ce3-4995-8230-b361099aa1e4","name":"user_id","value":72,"type":"number"},{"id":"d7c14753-505f-48ee-a344-fa565ace43df","name":"pedido_id","value":16,"type":"number"},{"id":"4158cae2-333e-4d2a-9d00-26b27c9583a4","name":"telefone","value":"5516992975836","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-640,-1296],"id":"df037b49-6b90-4a4a-9b7e-a63ab6c29cf7","name":"MontPedido1"},{"parameters":{"tableId":"comentario_pedido_temp","fieldsUi":{"fieldValues":[{"fieldId":"user_id","fieldValue":"={{ $json.user_id }}"},{"fieldId":"pedido_id","fieldValue":"={{ $json.pedido_id }}"},{"fieldId":"comentario","fieldValue":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fieldValues2_Field_Value', `Comentario campo`, 'string') }}"}]}},"type":"n8n-nodes-base.supabaseTool","typeVersion":1,"position":[-368,-1040],"id":"4466276d-e81b-455b-a0d7-bc04e4bd27c4","name":"Comentario","credentials":{"supabaseApi":{"id":"CcvRddDPb5xelxfb","name":"Supabase account"}}},{"parameters":{"operation":"update","tableId":"pedido_temp","filters":{"conditions":[{"keyName":"user_id","condition":"eq","keyValue":"={{ $json.user_id }}"},{"keyName":"pedido_id","condition":"eq","keyValue":"={{ $json.pedido_id }}"}]},"fieldsUi":{"fieldValues":[{"fieldId":"tipo_cobranca","fieldValue":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fieldValues0_Field_Value', `forma_pagamento`, 'string') }}"}]}},"type":"n8n-nodes-base.supabaseTool","typeVersion":1,"position":[-272,-1024],"id":"c654bfb2-2b66-4255-8f5a-0a0c547d7d3f","name":"SalvaFormaPagto","credentials":{"supabaseApi":{"id":"CcvRddDPb5xelxfb","name":"Supabase account"}}},{"parameters":{"descriptionType":"manual","toolDescription":"Execute a SQL query in Postgres fechamento ","operation":"executeQuery","query":"SELECT * from finalizar_pedido(  {{ $json.user_id }} ,{{ $json.pedido_id }} ) ;","options":{}},"type":"n8n-nodes-base.postgresTool","typeVersion":2.6,"position":[-176,-944],"id":"527da8aa-05f5-43a7-bcf0-344fdaf6d5ba","name":"Fechamento","credentials":{"postgres":{"id":"3NLaVyXonSrCcLE3","name":"Postgres account"}}},{"parameters":{"resource":"messages-api","instanceName":"=delivery","remoteJid":"={{ $('MontPedido1').item.json.telefone }}","messageText":"=```{{ $json.output }}```","options_message":{"delay":4}},"type":"n8n-nodes-evolution-api.evolutionApi","typeVersion":1,"position":[-48,-1328],"id":"eb621430-0a3a-4261-ae41-1c9ebf61d4d2","name":"MenuCardapio1","credentials":{"evolutionApi":{"id":"ApqS5DPziUrzonYT","name":"Evolution account"}}}],"connections":{"When chat message received":{"main":[[{"node":"MontPedido1","type":"main","index":0}]]},"Execute a SQL query1":{"main":[[{"node":"Dados Lead","type":"main","index":0}]]},"RejeitaItem":{"main":[[{"node":"ConcluiTudo","type":"main","index":0}]]},"Bebidas":{"main":[[{"node":"Itembebida","type":"main","index":0}]]},"Pizzas Fracionada":{"main":[[{"node":"ItemFracionado","type":"main","index":0}]]},"Pizzas Inteira":{"main":[[{"node":"ItemInteira","type":"main","index":0}]]},"Esfirra":{"main":[[{"node":"ItemEsfirra","type":"main","index":0}]]},"Itembebida":{"main":[[{"node":"Merge1","type":"main","index":0}]]},"ItemFracionado":{"main":[[{"node":"Merge1","type":"main","index":1}]]},"ItemInteira":{"main":[[{"node":"Merge1","type":"main","index":2}]]},"ItemEsfirra":{"main":[[{"node":"Merge1","type":"main","index":3}]]},"Auto-fixing Output Parser":{"ai_outputParser":[[{"node":"Basic LLM Chain","type":"ai_outputParser","index":0}]]},"OrdenaPedido":{"main":[[{"node":"Agente Pos Venda","type":"main","index":0}]]},"ConcluiTudo":{"main":[[{"node":"OrdenaPedido","type":"main","index":0}]]},"Bordas":{"main":[[{"node":"Item5","type":"main","index":0}]]},"Merge1":{"main":[[{"node":"DadoPedido","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"Auto-fixing Output Parser","type":"ai_languageModel","index":0},{"node":"Basic LLM Chain","type":"ai_languageModel","index":0}]]},"Structured Output Parser [Schema]":{"ai_outputParser":[[{"node":"Auto-fixing Output Parser","type":"ai_outputParser","index":0}]]},"Basic LLM Chain":{"main":[[{"node":"Bebidas","type":"main","index":0},{"node":"Pizzas Fracionada","type":"main","index":0},{"node":"Pizzas Inteira","type":"main","index":0},{"node":"Esfirra","type":"main","index":0},{"node":"item4","type":"main","index":0},{"node":"Bordas","type":"main","index":0}]]},"item4":{"main":[[{"node":"Item4","type":"main","index":0}]]},"Item4":{"main":[[{"node":"Merge1","type":"main","index":4}]]},"AtualizaValorPizzaFracionada2":{"main":[[{"node":"RejeitaItem","type":"main","index":0}]]},"AtualizaValorItem2":{"main":[[{"node":"AtualizaValorPizzaFracionada2","type":"main","index":0}]]},"Item5":{"main":[[{"node":"Merge1","type":"main","index":5}]]},"MontPedido":{"main":[[{"node":"Basic LLM Chain","type":"main","index":0}]]},"DadoPedido":{"main":[[{"node":"ValidaItemNome","type":"main","index":0}]]},"ValidaItemNome":{"main":[[{"node":"VinculaBordaItemPizza","type":"main","index":0}]]},"Code5":{"main":[[{"node":"MenuCardapio10","type":"main","index":0}]]},"MenuCardapio10":{"main":[[{"node":"GetNEncontradoFxl","type":"main","index":0}]]},"Code":{"main":[[{"node":"Execute a SQL query1","type":"main","index":0}]]},"VariasPizzas1":{"main":[[{"node":"Code13","type":"main","index":0}]]},"Code13":{"main":[[{"node":"MenuCardapio40","type":"main","index":0}]]},"Dados Lead":{"main":[[{"node":"MontPedido","type":"main","index":0}]]},"OpenAI Chat Model1":{"ai_languageModel":[[{"node":"Agente Pos Venda","type":"ai_languageModel","index":0}]]},"Simple Memory":{"ai_memory":[[{"node":"Agente Pos Venda","type":"ai_memory","index":0}]]},"GetCarrinhoFlx":{"main":[[{"node":"Code5","type":"main","index":0}]]},"GetNEncontradoFxl":{"main":[[{"node":"VariasPizzas1","type":"main","index":0}]]},"GetNãoEncontrado":{"main":[[{"node":"GetCarrinhoFlx","type":"main","index":0}]]},"GetProblemas":{"ai_tool":[[{"node":"Agente Pos Venda","type":"ai_tool","index":0}]]},"GetOpcoes":{"ai_tool":[[{"node":"Agente Pos Venda","type":"ai_tool","index":0}]]},"GetCarrinho":{"ai_tool":[[{"node":"Agente Pos Venda","type":"ai_tool","index":0}]]},"VinculaBordaItemPizza":{"main":[[{"node":"AtualizaValorItem2","type":"main","index":0}]]},"Agente Pos Venda":{"main":[[{"node":"MenuCardapio","type":"main","index":0}]]},"OpenAI Chat Model2":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"Simple Memory1":{"ai_memory":[[{"node":"AI Agent","type":"ai_memory","index":0}]]},"SalvaEndereco":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"MontPedido1":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"Comentario":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"SalvaFormaPagto":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Fechamento":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"AI Agent":{"main":[[{"node":"MenuCardapio1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"8382ffe0-c42b-4e76-9855-9f01c4e516e7","triggerCount":1,"shared":[{"createdAt":"2025-09-18T15:44:58.320Z","updatedAt":"2025-09-18T15:44:58.320Z","role":"workflow:owner","workflowId":"gL1FbKkYm9zGfCAA","projectId":"wFRMrac2003Pl1x6"}],"tags":[]}